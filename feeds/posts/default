<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JustAnOtherDevBlog</title>
    <link>http://www.ybonnel.fr</link>
    <atom:link href="http://www.ybonnel.fr/feed.xml" rel="self" type="application/rss+xml" />
    <description>JustAnOtherDevBlog</description>
    <language>fr-fr</language>
      <pubDate>Fri, 27 Jun 2014 15:46:32 +0200</pubDate>
      <lastBuildDate>Fri, 27 Jun 2014 15:46:32 +0200</lastBuildDate>

      
      <item>
          <title>Nouveau blog</title>
          <link>http://www.ybonnel.fr/2014/06/nouveau-blog.html</link>
          <pubDate>Fri, 27 Jun 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/06/nouveau-blog.html</guid>
          <description>
              &ltp&gt;Vous l&amp;rsquo;avez surement déjà vu, mon blog a changé de tête&amp;hellip;&lt/p&gt;&ltp&gt;Si vous voulez voir la différence, allez voir &lta href=&quot;http://ybonnel.blogspot.fr/&quot;&gt;l&amp;rsquo;ancien blog&lt/a&gt;.&lt/p&gt;&lth1&gt;Jbake&lt/h1&gt;&ltp&gt;J&amp;rsquo;avais envie de tester &lta href=&quot;http://jbake.org/&quot;&gt;jbake&lt/a&gt; qui est un générateur de site statique, un peu à l&amp;rsquo;image de jekyll mais en java.&lt/p&gt;&ltp&gt;J&amp;rsquo;ai choisi jbake car j&amp;rsquo;avais envie de pouvoir éditer et tester mon blog de manière offline, et il se trouve que jbake est à la mode actuellement.&ltbr/&gt;Autre avantge, l&amp;rsquo;article que vous lisez est écrit en Markdown, en voici le &lta href=&quot;https://github.com/ybonnel/blog/tree/master/src/jbake/content/2014/06/nouveau-blog.md&quot;&gt;contenu&lt/a&gt;.&lt/p&gt;&lth1&gt;Hébergement&lt/h1&gt;&ltp&gt;Vu que je passe sur une technologie avec des fichiers statiques, il est assez simple d&amp;rsquo;héberger le résultat sur github.&lt/p&gt;&ltp&gt;Cédric explique assez bien la marche à suivre sur son &lta href=&quot;http://melix.github.io/blog/2014/02/hosting-jbake-github.html&quot;&gt;blog&lt/a&gt;.&lt/p&gt;&lth1&gt;Vous en pensez quoi?&lt/h1&gt;&ltp&gt;Je ferai un article la semaine prochaine sur les détails de l&amp;rsquo;implémentation et la migration depuis blogger.&ltbr/&gt;Je vous expliquerai également pouquoi j&amp;rsquo;ai choisi les templates groovy&lt/p&gt;&ltp&gt;En attendant, n&amp;rsquo;hésitez pas à me dire ce que vous en pensez.&lt/p&gt;
          </description>
      </item>
      
      <item>
          <title>WebSocket, et comment on teste?</title>
          <link>http://www.ybonnel.fr/2014/06/websocket-et-comment-on-teste.html</link>
          <pubDate>Wed, 18 Jun 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/06/websocket-et-comment-on-teste.html</guid>
          <description>
              &ltp&gt;On a vu comment implémenter des websockets avec SimpleWeb4j dans un précédant &lta href=&quot;http://www.ybonnel.fr/2014/06/websocket-et-simpleweb4j.html&quot;&gt;article&lt/a&gt;, nous allons maintenant voir comment tester de manière automatisée la partie serveur websocket.&lt/p&gt;&ltbr/&gt;&lth2&gt;Librairies tierces&lt/h2&gt;&ltp&gt;Pour garder un code relativement propre, je vais utiliser trois librairies : &ltul&gt;&ltli&gt;&lta href=&quot;http://www.eclipse.org/jetty/documentation/current/jetty-websocket-client-api.html&quot;&gt;websocket-client&lt/a&gt; : Client WebSocket en java.&lt/li&gt;&ltli&gt;&lta href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;assertj-core&lt/a&gt; : Librairie d&apos;assertion &quot;fluent&quot;&lt/li&gt;&ltli&gt;&lta href=&quot;https://code.google.com/p/awaitility/&quot;&gt;awaitility&lt/a&gt; : Librairie d&apos;attente (pour gérer l&apos;asynchrone)&lt/li&gt;&lt/ul&gt;&lt/p&gt;&ltbr/&gt; &lth2&gt;Je veux faire quoi comme test?&lt/h2&gt;&ltp&gt;Je cherche à tester le code du billet précédant qui, pour rappel, était un système de chat. Le serveur de websocket reçoit donc des messages qu&apos;il redistribue à tous les clients connectés.&lt/p&gt;&ltp&gt;Scénario de test : &ltul&gt;&ltli&gt;Ouverture d&apos;une session 1.&lt/li&gt;&ltli&gt;Envoi d&apos;un message par la session 1 (message 1).&lt/li&gt;&ltli&gt;Ouverture d&apos;une session 2.&lt/li&gt;&ltli&gt;Envoi d&apos;un message par la session 2 (message 2).&lt/li&gt;&ltli&gt;Envoi d&apos;un message par la session 1 (message 3).&lt/li&gt;&ltli&gt;Fermeture de la session 1.&lt/li&gt;&ltli&gt;Envoi d&apos;un message par la session 2 (message 4).&lt/li&gt;&ltli&gt;Fermeture de la session 2.&lt/li&gt;  &lt/ul&gt;&lt/p&gt;&ltp&gt;Vérifications à faire : &ltul&gt;&ltli&gt;La session 1 a reçu 3 messages (les messages 1 à 3)&lt/li&gt;&ltli&gt;La session 2 a reçu 3 messages (les messages 2 à 4)&lt/li&gt;&lt/ul&gt;&lt/p&gt;&ltbr/&gt; &lth2&gt;Code de test&lt/h2&gt;&ltp&gt;Assez parler, place au code. J&apos;espère que les commentaires sont suffisants, si ce n&apos;est pas le cas, n&apos;hésitez pas à le dire j&apos;en ajouterais.&lt/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/fdc9348326e0667c52c7.js&quot;&gt;&lt/script&gt;

          </description>
      </item>
      
      <item>
          <title>WebSocket et SimpleWeb4j</title>
          <link>http://www.ybonnel.fr/2014/06/websocket-et-simpleweb4j.html</link>
          <pubDate>Wed, 11 Jun 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/06/websocket-et-simpleweb4j.html</guid>
          <description>
              &ltp&gt;Nous allons voir comment faire du websocket avec SimpleWeb4j.&lt/p&gt; &lth2&gt;WebSocket c&apos;est quoi&lt/h2&gt;&ltp&gt;&lta href=&quot;http://fr.wikipedia.org/wiki/WebSocket&quot;&gt;WebSocket&lt/a&gt; est un protocole permettant la communication de type push entre un browser et un serveur de manière bi-directionnelle.&lt/p&gt;&ltbr/&gt; &lth2&gt;On fait quoi comme exemple?&lt/h2&gt;&ltp&gt;Comme je suis super original, on va partir sur un chat (le truc pour discuter, pas l&apos;animal !), ça nous rappellera la grande époque de caramail :)&lt/p&gt;&ltp&gt;Pour mettre en place un chat, on a besoin d&apos;un service côté serveur qui peut recevoir des messages en push depuis les clients, et quand il en reçoit un le redistribue à tous les clients.&lt/p&gt;&ltbr/&gt; &lth2&gt;La partie serveur&lt/h2&gt;&ltp&gt;Nous allons commencer par créer notre objet métier représentant un message, celui-ci contient l&apos;utilisateur, le texte et la date du message. Il servira pour les messages que l&apos;on envoie aux clients (pour les flux client -&gt; serveur, nous utiliserons une simple String).&lt/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/387f265625b7f50b3fe1.js&quot;&gt;&lt/script&gt; &ltp&gt;Nous allons maintenant créer la route de la websocket avec la méthode &lta href=&quot;https://simpleweb4j.ci.cloudbees.com/job/SimpleWeb4j-build/site/apidocs/fr/ybonnel/simpleweb4j/SimpleWeb4j.html#websocket-java.lang.String-fr.ybonnel.simpleweb4j.handlers.websocket.WebSocketAdapter-&quot;&gt;SimpleWeb4j.websocket&lt/a&gt;, cette méthode prend en paramètre une String représentant l&apos;url et un &lta href=&quot;https://simpleweb4j.ci.cloudbees.com/job/SimpleWeb4j-build/site/apidocs/fr/ybonnel/simpleweb4j/handlers/websocket/WebSocketAdapter.html&quot;&gt;WebSocketAdapter&lt/a&gt;. Un WebSocketAdapter et une factory qui contient une méthode prenant en paramètres les &quot;RouteParameters&quot; et qui construit un &lta href=&quot;https://simpleweb4j.ci.cloudbees.com/job/SimpleWeb4j-build/site/apidocs/fr/ybonnel/simpleweb4j/handlers/websocket/WebSocketListener.html&quot;&gt;WebSocketListenner&lt/a&gt;. On a donc le code suivant pour l&apos;instant :&lt/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/040e5d0fc44f185471f6.js&quot;&gt;&lt/script&gt; &ltp&gt;Voyons maintenant comment construire le &quot;WebSocketListener&quot;, nous avons pour ça un builder. Nous souhaitons construire un listener en implémentant un comportement sur 3 événements : &ltul&gt;&ltli&gt;&ltu&gt;onConnect&lt/u&gt; : on ajoute la session dans un set pour connaître les sessions ouvertes.&lt/li&gt;&ltli&gt;&ltu&gt;onClose&lt/u&gt; : on supprime la session de notre set.&lt/li&gt;&ltli&gt;&ltu&gt;onMessage&lt/u&gt; : on envoi le message reçu à tout les clients.&lt/li&gt;&lt/ul&gt;Voici donc le résultat final : &lt/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/b4fe14c5f0cebeaccd90.js&quot;&gt;&lt/script&gt;&ltbr/&gt;  &lth2&gt;La partie cliente&lt/h2&gt;&ltp&gt;Pour la partie cliente, on a un objet javascript &quot;WebSocket&quot; qui prend l&apos;url en paramètre du constructeur.&lt/p&gt;&ltp&gt;Il nous reste après à définir les callback &quot;onmessage&quot; et &quot;onopen&quot;. Pour envoyer un message au serveur, il suffit d&apos;utiliser la méthode WebSocket.send. Si vous voulez plus de détails, vous pouvez aller voir la page de &lta href=&quot;https://developer.mozilla.org/fr-FR/docs/Web/API/WebSocket&quot;&gt;mozilla&lt/a&gt;.&lt/p&gt;&ltp&gt;Voici donc la page html complète, comme d&apos;habitude, j&apos;utilise angular.js :) &gt;/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/55b099746cbf87875110.js&quot;&gt;&lt/script&gt;&ltbr/&gt; &ltp&gt;Alors, ça vous parait compliqué de faire du WebSocket?&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>La fin d'un article par jour</title>
          <link>http://www.ybonnel.fr/2014/06/la-fin-dun-article-par-jour.html</link>
          <pubDate>Fri, 6 Jun 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/06/la-fin-dun-article-par-jour.html</guid>
          <description>
              &ltp&gt;Le dernier article de la semaine sera consacré à vous dire que j&apos;arrête d&apos;écrire tous les jours!&lt/p&gt; &ltp&gt;Les raisons : &ltul&gt;&ltli&gt;La fréquentation de blog (entre 10 et 30 utilisateurs par jour)&lt/li&gt;&ltli&gt;La baisse de la fréquentation par article depuis que j&apos;écris tous les jours&lt/li&gt;&ltli&gt;Le manque d&apos;idée pour continuer à tenir ce rythme :)&lt/li&gt;&lt/ul&gt;&lt/p&gt; &ltp&gt;N&apos;hésitez pas à me faire vos retours sur cette expérience qui a duré 2 semaines.&lt/p&gt; &ltp&gt;Je ne vais pas pour autant retourner à un article par an, mais plutôt un article par semaine.&lt/p&gt; &ltp&gt;Bon WE!&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>Server Sent Events, et côté client?</title>
          <link>http://www.ybonnel.fr/2014/06/server-sent-events-et-cote-client.html</link>
          <pubDate>Thu, 5 Jun 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/06/server-sent-events-et-cote-client.html</guid>
          <description>
              &ltp&gt;Aujourd&apos;hui, je vais vous parler de Server Sent Events côté client javascript.&lt/p&gt; &ltp&gt;Nous allons reprendre le serveur qui envoyait l&apos;heure toutes les secondes codé &lta href=&quot;http://www.ybonnel.fr/2014/06/server-sent-events-avec-simpleweb4j.html&quot;&gt;ici&lt/a&gt;.&ltp&gt; &ltp&gt;L&apos;utilisation d&apos;un flux Server Sent Event se fait par l&apos;intermédiaire de l&apos;objet &quot;EventSource&quot; qui prend comme paramètre dans le constructeur l&apos;url du flux. Cet objet possède une fonction &quot;addEventListener&quot; qui prend en paramètres le type de listener (message pour la réception de nouvelles données) ainsi que la callback.&lt/p&gt;&ltp&gt;Si vous êtes comme moi et que vous utilisez angular.js un peu partout, vous savez comment il peut s&apos;avérer complexe de s&apos;intégrer dans son dual binding, mais la méthode $scope.$apply est là pour ça!&lt/p&gt; &ltp&gt;Voici donc le résultat final :&lt/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/e385ac59e4cf00ebd2f7.js&quot;&gt;&lt/script&gt; &ltbr/&gt;&ltp&gt;Et voilà, c&apos;est pas bien compliqué de faire du temps réel :)&lt/p&gt;&ltp&gt;Petit précision, EventSource n&apos;est pas supporté par IE, mais il existe un contournement : &lta href=&quot;https://github.com/Yaffle/EventSource/&quot;&gt;github.com/Yaffle/EventSource&lt/a&gt;&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>Server Sent Events réactifs avec SimpleWeb4j</title>
          <link>http://www.ybonnel.fr/2014/06/server-sent-events-reactifs-avec.html</link>
          <pubDate>Wed, 4 Jun 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/06/server-sent-events-reactifs-avec.html</guid>
          <description>
              &ltp&gt;Nous avons vu &lta href=&quot;http://www.ybonnel.fr/2014/06/server-sent-events-avec-simpleweb4j.html&quot;&gt;hier&lt/a&gt; un exemple simple de Server Sent Events avec SimpleWeb4j, passons maintenant à plus complexe, un exemple dit &quot;réactif&quot;, ce n&apos;est pas le flux qui demande la valeur suivante, mais bien un &quot;service&quot; extérieure qui déclenche l&apos;envoi à tous les flux ouverts.&lt/p&gt; &ltp&gt;Pour l&apos;exemple, nous allons créer trois générateurs d&apos;événements, avec chacun un délai aléatoire entre les événements.&lt/p&gt;&ltp&gt;Nous allons donc tout d&apos;abord créer une classe &quot;Event&quot;, cette classe contient un nom, une valeur et l&apos;heure de création. La valeur est créée de manière aléatoire.&lt/p&gt;&ltp&gt;Nous allons ensuite créer un générateur, qui est un Runnable infini, et envoi des événements aux handlers SimpleWeb4j.&lt/p&gt;&ltp&gt;Un handler SimpleWeb4j est une classe fournie par SimpleWeb4j qui contient une méthode &quot;next&quot; permettant d&apos;envoyer les événements. Nous stockerons ces handlers dans un ConcurrentHashSet pour pouvoir tous les adresser (et pas seulement le dernier flux créé.&lt/p&gt;&ltp&gt;Une fois tous ces composants créés, il suffit de déclarer la route, voici donc le résultat final :&lt/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/8f17b95b7c646f35b674.js&quot;&gt;&lt/script&gt;&ltbr/&gt;&ltp&gt;J&apos;espère vous avoir montré l&apos;intérêt de SimpleWeb4j sur ce cas beaucoup moins simple que le précédent.&lt/p&gt;&ltp&gt;Si le sujet vous intéresse, vous pouvez regarder ma présentation donnée au &lta href=&quot;http://www.breizhcamp.org&quot;&gt;Breizhcamp&lt/a&gt; sur &lta href=&quot;http://www.parleys.com/play/538c8865e4b0a38a46cbec9e&quot;&gt;parleys&lt/a&gt; :&lt/p&gt;&ltiframe type=&quot;text/html&quot; width=&quot;420&quot; height=&quot;290&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot; src=&quot;http://www.parleys.com/share.html#play/538c8865e4b0a38a46cbec9e&quot; frameborder=&quot;0&quot;&gt;&amp;lt;br /&amp;gt;&lt/iframe&gt;

          </description>
      </item>
      
      <item>
          <title>Server Sent Events avec SimpleWeb4j</title>
          <link>http://www.ybonnel.fr/2014/06/server-sent-events-avec-simpleweb4j.html</link>
          <pubDate>Tue, 3 Jun 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/06/server-sent-events-avec-simpleweb4j.html</guid>
          <description>
              &ltp&gt;Je vous ai montré &lta href=&quot;http://www.ybonnel.fr/2014/06/server-sent-events-avec-jetty.html&quot;&gt;hier&lt/a&gt; comment faire du SSE avec Jetty. Nous allons maintenant voir comment faire avec SimpleWeb4j.&lt/p&gt; &ltp&gt;L&apos;exemple avec jetty était une horloge déclenchée toutes les secondes à partir de l&apos;accès à l&apos;url, voyons donc comment coder cela avec SimpleWeb4j : &ltscript src=&quot;https://gist.github.com/ybonnel/f508c8c511c3cd429742.js&quot;&gt;&lt/script&gt;Simple, non? &lt/p&gt;&ltbr/&gt; &ltp&gt;Dans la vrai vie, on souhaite sans doute pouvoir déclencher simplement l&apos;envoie d&apos;un événement sans être dépendant d&apos;un délai quelconque. Ce sera l&apos;objet de l&apos;article de demain :)&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>Server Sent Events avec Jetty</title>
          <link>http://www.ybonnel.fr/2014/06/server-sent-events-avec-jetty.html</link>
          <pubDate>Mon, 2 Jun 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/06/server-sent-events-avec-jetty.html</guid>
          <description>
              &ltp&gt;Je vais aujourd&apos;hui vous présenter comment faire du &lta href=&quot;http://dev.w3.org/html5/eventsource/&quot;&gt;Server-Sent-Events&lt/a&gt; (EventSource) avec Jetty.&lt/p&gt; &lth2&gt;C&apos;est quoi&lt/h2&gt;&ltp&gt;Si vous avez déjà lu w3c, passez au chapitre suivant :)&lt/p&gt;&ltp&gt;La technologie Server Sent Events (ou EventSource du nom de l&apos;API javascripts) est une technologie permettant de faire du push du serveur vers le client en gardant une connexion ouverte.&lt/p&gt;&ltp&gt;Un des gros avantages selon moi de cette technologie est sa simplicité, c&apos;est du texte sur HTTP. Chaque événement est préfixé de &quot;data: &quot;, et on met deux retours à la ligne pour séparer les événements (je simplifie un peu).&lt/p&gt;&ltbr/&gt; &lth2&gt;Comment je fait coté serveur avec Jetty&lt/h2&gt;&ltp&gt;Le plus simple est encore de vous montrer le code :)&lt/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/85850107b392ceac43c7.js&quot;&gt;&lt/script&gt;&ltbr/&gt; &ltp&gt;Demain, je vous montrerai que c&apos;est quand même beaucoup plus simple d&apos;utiliser SimpleWeb4j pour le faire :)&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>Services REST avec SimpleWeb4J</title>
          <link>http://www.ybonnel.fr/2014/05/services-rest-avec-simpleweb4j.html</link>
          <pubDate>Fri, 30 May 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/05/services-rest-avec-simpleweb4j.html</guid>
          <description>
              &ltp&gt;Cet article est le deuxième article de la série sur &lta href=&quot;http://www.ybonnel.fr/search/label/SimpleWeb4j&quot;&gt;SimpleWeb4j&lt/a&gt;&lt/p&gt; &ltp&gt;Dans le &lta href=&quot;http://www.ybonnel.fr/2014/05/simpleweb4j-quick-start.html&quot;&gt;première article&lt/a&gt; on a vu comment démarrer SimpleWeb4j en une ligne de code, dans l&apos;article d&apos;aujourd&apos;hui, nous allors voir comment exposer des services REST en json.&lt/p&gt; &lth2&gt;Premiers cas : exposer une String &quot;Hello World&quot;&lt/h2&gt; &ltp&gt;J&apos;espère que le code est suffisamment simple pour ne pas avoir besoin d&apos;explication.&lt/p&gt; &ltscript src=&quot;https://gist.github.com/ybonnel/bf0f34483d47d5ca8966.js&quot;&gt;&lt/script&gt; &ltp&gt;On peux voir qu le résultat est entouré de guillemets, ceci est du au fait que SimpleWeb4j transforme la chaîne de caractère en json.&lt/p&gt; &ltbr/&gt; &lth2&gt;Deuxième cas : utilisation d&apos;une variable de route&lt/h2&gt; &ltscript src=&quot;https://gist.github.com/ybonnel/b7b50206951e056a5403.js&quot;&gt;&lt/script&gt; &ltp&gt;Cet exemple mérite peut-être un peu plus d&apos;explications. SimpleWeb4j permet d&apos;ajouter des paramètres à la route, ces paramètres sont préfixés de &apos;:&apos;. Pour les récupérer on utilise le paramètre RouteParameters qui est le deuxième argument de notre lambda. Le premier argument quand à lui contient l&apos;objet envoyé dans le request body de la requête, nous ne l&apos;utilisons donc pas.&lt/p&gt; &ltbr/&gt; &lth2&gt;Troisième cas : objet complexe&lt/h2&gt; &ltp&gt;Nous avons vu que renvoyer une chaîne de caractère était plutôt simple, voyons maintenant comment renvoyer un objet plus complexe.&lt/p&gt; &ltscript src=&quot;https://gist.github.com/ybonnel/9116ffb1ef033e66af68.js&quot;&gt;&lt/script&gt; &ltp&gt;On peut donc voir que renvoyer un objet n&apos;est pas plus compliqué, SimpleWeb4j s&apos;occupe de transformer celui-ci en json&lt/p&gt; &ltbr/&gt;&ltbr/&gt; &ltp&gt;J&apos;espère vous avoir donner envie de regarder SimpleWeb4j de plus près, si quelque chose vous manque, n&apos;hésitez pas à le dire ou à faire une pull request sur &lta href=&quot;https://github.com/ybonnel/SimpleWeb4j&quot;&gt;github&lt/a&gt;.&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>ConcurrentHashMap et LongAdder</title>
          <link>http://www.ybonnel.fr/2014/05/concurrenthashmap-et-longadder.html</link>
          <pubDate>Thu, 29 May 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/05/concurrenthashmap-et-longadder.html</guid>
          <description>
              &ltp&gt;Le sujet du jour est de réaliser un petit filtre de Servlet pour stocker le nombre d&apos;appels pour chaque url.&lt/p&gt; &ltp&gt;Pour réaliser cela, il suffit de lire la javadoc de &lta href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html&quot;&gt;ConcurrentHashMap&lt/a&gt; et plus particulièrement : &ltbr/&gt;&lti&gt;A ConcurrentHashMap can be used as scalable frequency map (a form of histogram or multiset) by using LongAdder values and initializing via computeIfAbsent. For example, to add a count to a ConcurrentHashMap&amp;lt;String,LongAdder&amp;gt; freqs, you can use freqs.computeIfAbsent(k -&gt; new LongAdder()).increment();&lt/i&gt;&lt/p&gt; &ltp&gt;L&apos;implémentation est donc très simple : &ltscript src=&quot;https://gist.github.com/ybonnel/e0054c49a29ae7953c32.js&quot;&gt;&lt/script&gt;&lt/p&gt; &ltp&gt;L&apos;affichage n&apos;est pas plus compliqué : &ltscript src=&quot;https://gist.github.com/ybonnel/80b1d3d2edbcd7272597.js&quot;&gt;&lt/script&gt;&lt/p&gt; &ltp&gt;On a donc une gestion de stats thread safe et performante en une ligne de code :)&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>SimpleWeb4J - quick start</title>
          <link>http://www.ybonnel.fr/2014/05/simpleweb4j-quick-start.html</link>
          <pubDate>Wed, 28 May 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/05/simpleweb4j-quick-start.html</guid>
          <description>
              &ltp&gt;Ceux qui me suivent connaissent sans doute déjà &lta href=&quot;https://github.com/ybonnel/SimpleWeb4j&quot;&gt;SimpleWeb4j&lt/a&gt;.  Il s&apos;agit d&apos;encore un framework web donc le but est de pouvoir faire du web en java de manière très simple.&lt/p&gt; &ltp&gt;Je n&apos;ai jamais écrit d&apos;article sur SimpleWeb4j, je vais donc écrire une série d&apos;articles sur ce sujet afin de vous montrer la simplicité de ce framework.&lt/p&gt; &ltp&gt;Je vais commencer par le classique Quick Start, ou comment démarrer un serveur Web capable de servir des ressources statiques.&lt/p&gt; &lth2&gt;Dépendance maven&lt/h2&gt;&ltp&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/c1168b5f71cb6076d733.js&quot;&gt;&lt/script&gt;&lt/p&gt; &lth2&gt;Ressources statiques&lt/h2&gt;&ltp&gt;Mettez vos ressources statiques au sein d&apos;un package &quot;public&quot; dans votre classpath.&lt/p&gt; &lth2&gt;Classe main&lt/h2&gt;&ltp&gt;Il vous suffit ensuite de démarrer le serveur : &ltscript src=&quot;https://gist.github.com/ybonnel/74d0fca77b718eb300c1.js&quot;&gt;&lt/script&gt;&lt/p&gt; &ltp&gt;Et voilà, vous avez un serveur prêt sur http://localhost:9999, pas besoin de déclaration xml ou autre complexité, un simple appel à start suffit.&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>Scheduler en Java</title>
          <link>http://www.ybonnel.fr/2014/05/scheduler-en-java.html</link>
          <pubDate>Tue, 27 May 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/05/scheduler-en-java.html</guid>
          <description>
              &ltp&gt;Si je vous demande comment déclencher une tache récurrente en Java, je suis sûr que certains d&apos;entre vous répondront Quartz...&lt/p&gt; &ltp&gt;Ceux qui répondent ça ne connaissent sans doute pas les ExecutorService de Java, et plus particulièrement l&apos;interface &lta href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html&quot;&gt;ScheduledExecutorService&lt/a&gt; (apparue en Java 1.5...).&lt/p&gt; &ltp&gt;Voici donc un petit exemple permettant d&apos;afficher l&apos;heure courante toute les secondes :&lt/p&gt;&ltscript src=&quot;https://gist.github.com/ybonnel/39b3e53dd3d914fab02a.js&quot;&gt;&lt/script&gt; &ltp&gt;Ne vous habituez pas à un article par jour, ça ne va pas durer :)&lt/p&gt;  

          </description>
      </item>
      
      <item>
          <title>Un cache en java</title>
          <link>http://www.ybonnel.fr/2014/05/un-cache-en-java.html</link>
          <pubDate>Mon, 26 May 2014 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2014/05/un-cache-en-java.html</guid>
          <description>
              &ltp&gt;Après bientôt un an sans écrire d&apos;article, je vais essayer de me remettre à écrire des trucs... Je ne garanti pas que ce soit intéressant :)&lt/p&gt;&ltp&gt;Le premiers de cette renaissance sera sur les caches simples en Java.&lt/p&gt;Je parle ici de cache non révocable (j&apos;en ai eu besoin très récemment). Voici la classe permettant de faire ceci :  &ltscript src=&quot;https://gist.github.com/ybonnel/795a9f1ef0e08c9a585f.js&quot;&gt;&lt/script&gt; &ltp&gt;Vous l&apos;aurez compris, cet article cherche a vous présenter la méthode &lta href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#computeIfAbsent-K-java.util.function.Function-&quot;&gt;ConcurrentHashMap.computeIfAbsent&lt/a&gt;, cette méthode est apparue en Java 8.&lt/p&gt;&ltp&gt;Cette dernière permet donc de remplir notre Map si la clé est absente, et ce de manière Thread safe!&lt/p&gt; &ltp&gt;J&apos;espère pouvoir publier le prochain article dans moins d&apos;un an, à bientôt donc :)&ltp&gt;

          </description>
      </item>
      
      <item>
          <title>Mes premiers pas avec CouchBase</title>
          <link>http://www.ybonnel.fr/2013/05/mes-premiers-pas-avec-couchbase.html</link>
          <pubDate>Tue, 28 May 2013 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2013/05/mes-premiers-pas-avec-couchbase.html</guid>
          <description>
               Pour ceux qui ne connaissent pas, CouchBase est une base NoSQL orientée document (type MongoDB). Le but ici n&apos;est pas de vous faire un cours sur les bases NoSQL, mais plutôt de vous faire un retour très concret sur mes premiers pas opérationnels avec celle-ci.&ltbr/&gt;&ltbr/&gt;&lth1&gt;Contexte&lt/h1&gt;Comme certains d&apos;entre vous le savent sûrement je suis l&apos;auteur d&apos;un programme télé disponible en tant qu&apos;&lta href=&quot;https://play.google.com/store/apps/details?id=fr.ybo.ybotv.android&quot;&gt;application Android&lt/a&gt; et en tant que &lta href=&quot;http://ybo-tv.ybonnel.fr&quot;&gt;site web&lt/a&gt;. Avant ma refonte vers CouchBase, le serveur fonctionnait avec un gros cache mémoire chargé à partir d&apos;un fichier xml lui-même mis à jour toute les nuits. Depuis quelques semaines, j&apos;avais des problèmes avec la source de mes données, il fallait donc que je change de source, j&apos;en ai donc profité pour changer l&apos;architecture.&ltbr/&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;Nouvelle architecture&lt/h1&gt;J&apos;ai un batch qui tourne toute les nuits pour récupérer les données et qui les insère dans la base CouchBase, le serveur se contente donc de requêter CouchBase&ltbr/&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;Mise en place&lt/h1&gt; &lth2&gt;Installation de CouchBase&lt/h2&gt;C&apos;est le point ultra positif de CouchBase: l&apos;installation. J&apos;ai rarement vu une installation aussi simple. Le produit dispose d&apos;une interface d&apos;administration plutôt sexy, ça évite d&apos;avoir besoin d&apos;une formation de 5 jours et d&apos;une certification pour être capable d’administrer la chose! Je vous invite donc à aller consulter la doc sur ce point, elle est largement suffisante.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Mise en place du client java&lt/h2&gt;Premier reproche que je peux faire à CouchBase: le client java n&apos;est pas disponible sur le central, ce qui oblige à ajouter le repository CouchBase à la main...&ltbr/&gt;Voici donc comment ajouter le client dans le pom.xml : &ltpre class=&quot;brush:xml&quot;&gt;&ltbr /&gt;&amp;lt;dependencies&amp;gt;&ltbr /&gt;    &amp;lt;dependency&amp;gt;&ltbr /&gt;        &amp;lt;groupId&amp;gt;couchbase&amp;lt;/groupId&amp;gt;&ltbr /&gt;        &amp;lt;artifactId&amp;gt;couchbase-client&amp;lt;/artifactId&amp;gt;&ltbr /&gt;        &amp;lt;version&amp;gt;1.1.4&amp;lt;/version&amp;gt;&ltbr /&gt;    &amp;lt;/dependency&amp;gt;&ltbr /&gt;&amp;lt;/dependencies&amp;gt;&ltbr /&gt;&ltbr /&gt;&amp;lt;repositories&amp;gt;&ltbr /&gt;    &amp;lt;repository&amp;gt;&ltbr /&gt;        &amp;lt;id&amp;gt;couchbase&amp;lt;/id&amp;gt;&ltbr /&gt;        &amp;lt;name&amp;gt;Couchbase Maven Repository&amp;lt;/name&amp;gt;&ltbr /&gt;        &amp;lt;layout&amp;gt;default&amp;lt;/layout&amp;gt;&ltbr /&gt;        &amp;lt;url&amp;gt;http://files.couchbase.com/maven2/&amp;lt;/url&amp;gt;&ltbr /&gt;        &amp;lt;snapshots&amp;gt;&ltbr /&gt;            &amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&ltbr /&gt;        &amp;lt;/snapshots&amp;gt;&ltbr /&gt;    &amp;lt;/repository&amp;gt;&ltbr /&gt;&amp;lt;/repositories&amp;gt;&ltbr /&gt;&lt/pre&gt;&ltbr/&gt; &lth2&gt;Batch nocturne : insertion en masse&lt/h2&gt;La première partie qu&apos;il a fallu mettre en place est le peuplement de cette base avec le programme télé courant.&ltbr/&gt;Voici donc le contenu de la méthode chargée de cette insertion : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;/**&ltbr /&gt; * Insertion du programme télé.&ltbr /&gt; * @param tv programme télé contenant la liste&ltbr /&gt; *        des chaînes et la liste des programmes.&ltbr /&gt; */&ltbr /&gt;private static void insertIntoChouchbase(TvForCouchBase tv)&ltbr /&gt;        throws URISyntaxException, IOException,&ltbr /&gt;               ExecutionException, InterruptedException {&ltbr /&gt;    // Création de l&apos;instance jackson pour la serialisation json&ltbr /&gt;    ObjectMapper mapper = new ObjectMapper();&ltbr /&gt;    mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);&ltbr /&gt;&ltbr /&gt;    // Création du client CouchBase.&ltbr /&gt;    CouchbaseClient client = new CouchbaseClient(&ltbr /&gt;            newArrayList(new URI(&quot;http://127.0.0.1:8091/pools&quot;)), &quot;default&quot;, &quot;&quot;);&ltbr /&gt;&ltbr /&gt;    logger.info(&quot;Insert channels&quot;);&ltbr /&gt;    // Transformation des chaines en json.&ltbr /&gt;    String channelIntoJson = mapper.writeValueAsString(tv.getChannel());&ltbr /&gt;    // Insertion des chaines&ltbr /&gt;    client.set(&ltbr /&gt;            &quot;channels&quot;, // Clé unique pour la liste des chaines.&ltbr /&gt;            (int) TimeUnit.DAYS.toSeconds(3), // Purger au bout de trois jours.&ltbr /&gt;            channelIntoJson, // liste des chaînes&ltbr /&gt;            PersistTo.ZERO // On attend pas que se soit persister sur disque.&ltbr /&gt;    ).get();&ltbr /&gt;&ltbr /&gt;    logger.info(&quot;Insert programs&quot;);&ltbr /&gt;    for (ProgrammeForCouchBase programme : tv.getProgramme()) {&ltbr /&gt;        // Transformation d&apos;un programme en json. &ltbr /&gt;        String programmeIntoJson = mapper.writeValueAsString(programme);&ltbr /&gt;        // Insertion du programme.&ltbr /&gt;        client.set(&ltbr /&gt;                &quot;prg_&quot; + programme.getId(), // Clé unique du programme&ltbr /&gt;                (int) TimeUnit.DAYS.toSeconds(3), // Purger au bout de trois jours.&ltbr /&gt;                programmeIntoJson, // Le programme&ltbr /&gt;                PersistTo.ZERO // On attend pas que se soit persister sur disque.&ltbr /&gt;        ).get();&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    // On arrête le client.&ltbr /&gt;    client.shutdown(30, TimeUnit.SECONDS);&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&ltbr/&gt; &lth2&gt;Serveur : les queries&lt/h2&gt;Une fois l&apos;index créé sur la console d&apos;administration de CouchBase, le requêtage est très simple. J&apos;ai par exemple créé un index permettant de récupérer tout les programmes associés à une chaine. Le code de l&apos;index (appelé &quot;view&quot; dans CouchBase) est du javascript très simple : &ltpre class=&quot;brush:js&quot;&gt;&ltbr /&gt;function (doc, meta) {&ltbr /&gt;  if (doc.channel) {&ltbr /&gt;    emit(doc.channel, null);&ltbr /&gt;  }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt; Il faut ensuite récupérer les données côté client : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;// Récupération du client CouchBase(singleton maison)&ltbr /&gt;CouchbaseClient client = CouchBaseService.INSTANCE.getClient();&ltbr /&gt;// Mapper permettant de transformer le json en objet.&ltbr /&gt;ObjectMapper mapper = CouchBaseService.INSTANCE.getMapper();&ltbr /&gt;&ltbr /&gt;// Récupération de la vue.&ltbr /&gt;View view = client.getView(&quot;programme&quot;, &quot;by_channel&quot;);&ltbr /&gt;// Création de la query&ltbr /&gt;Query query = new Query();&ltbr /&gt;query.setKey(ComplexKey.of(channel));&ltbr /&gt;// On inclut les documents dans la réponse pour ne pas avoir à ré-appeler CouchBase.&ltbr /&gt;query.setIncludeDocs(true);&ltbr /&gt;&ltbr /&gt;List&amp;lt;Programme&amp;gt; programmes = new ArrayList&amp;lt;Programme&amp;gt;();&ltbr /&gt;for (ViewRow row : client.query(view, query)) {&ltbr /&gt;    // Pour chaque ligne de la réponse de CouchBase,&ltbr /&gt;    // on transforme le document en objet.&ltbr /&gt;    programmes.add(mapper.readValue(&ltbr /&gt;            (String) row.getDocument(), &ltbr /&gt;            Programme.class));&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt; Comme on le voit, l&apos;intégration se fait tout en douceur, rien de bien compliqué.&ltbr/&gt;&ltbr/&gt;  &lth1&gt;Conclusion&lt/h1&gt;Dans l&apos;ensemble je suis très satisfait de CouchBase, les points positifs sont : api très simple, installation très simple, console d&apos;administration réellement digne de ce nom.&ltbr/&gt;Seuls deux points m&apos;ont un peu déçu.&ltbr/&gt;Le premier est le fait que la librairie Java ne soit pas déployée dans le central maven (je déteste ajouter des repository tierces dans mon pom.xml...). &ltbr/&gt;Le deuxième point ne concerne pas directement l&apos;utilisation, il s&apos;agit de la configuration choisie pour le build de la librairie Java. J&apos;ai trouvé une anomalie dans le code de la librairie java, j&apos;ai donc voulu faire une pull request pour la corriger. J&apos;ai donc récupéré les sources, et me suis aperçu que le build est fait via &quot;ant&quot;, étant allergique à &quot;ant&quot;, je ne suis pas allé plus loin (l&apos;anomalie a quand même été corrigée par l&apos;équipe CouchBase). De même dans le README de la librairie, aucune info sur la contribution, que des infos sur l&apos;utilisation...&ltbr/&gt;Malgré ces deux points, je reste ultra-satisfait de CouchBase, son utilisation est simple, et quand on montre la console d&apos;administration, tout le monde est séduit!&ltbr/&gt;&ltbr/&gt;En bref, essayer CouchBase c&apos;est l&apos;adopter!  

          </description>
      </item>
      
      <item>
          <title>Devoxx France 2013 : ma première journée</title>
          <link>http://www.ybonnel.fr/2013/03/devoxx-france-2013-ma-premiere-journee.html</link>
          <pubDate>Thu, 28 Mar 2013 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2013/03/devoxx-france-2013-ma-premiere-journee.html</guid>
          <description>
              Pour ceux qui ne connaissent pas Devoxx France, il s&apos;agit de LA conférence java où il faut être (1400 personnes). Il s&apos;agit principalement de conférences présentées par des indépendants (pas de conférences commerciales donc).&ltbr/&gt;J&apos;étais déjà présent à la première édition en 2012, et me voici donc de retour à cet événement passionnant.&ltbr/&gt;La première journée de cet évènement est consacrée aux &quot;Universités&quot; (conférence de 3H permettant de voir des sujets en profondeur) et aux &quot;Hands on labs&quot; (sorte de TP de 3H). Il y a également 3 créneaux de Tools in actions (30 minutes pour présenter un sujet/outil) en fin de journée.&ltbr/&gt;&ltbr/&gt; &lth3&gt;Les mains dans le Ceylon : venez coder avec les auteurs du language : &lta href=&quot;https://twitter.com/UnFroMage&quot;&gt;Stéphane Épardaud&lt/a&gt; et &lta href=&quot;https://twitter.com/emmanuelbernard&quot;&gt;Emmanuel Bernard&lt/a&gt;&lt/h3&gt;Cette première session à laquelle j&apos;ai assité était un Hands on labs, on est donc parti pour 3 heures de code avec ce nouveau langage que j&apos;avais déjà eu l&apos;occasion de tester à l&apos;occasion de ma participation à &lta href=&quot;http://www.code-story.net&quot;&gt;Code Story&lt/a&gt;.&ltbr/&gt;Je pense que l&apos;organisation de ce type de session est extrêmement compliqué de part la différence de connaissance et de préparation entre les participants.&ltbr/&gt;J&apos;ai toutefois passé un bon moment qui m&apos;a permis d&apos;apprendre certaines bases qui me manquaient pour bien coder avec ce language que je trouve très prometteur. Ce que j&apos;aime dans la philosophie de Ceylon, c&apos;est qu&apos;ils ne sont pas partis sur le principe d&apos;écrire le moins de caractères possible, mais plutôt d&apos;avoir un code le plus lisible possible, sans pour autant écrire d&apos;informations redondantes. Malgré tout j&apos;ai du mal à croire à la réussite d&apos;un nouveau language, mais &quot;wait and see&quot;.&ltbr/&gt;&ltbr/&gt; &lth3&gt;Stratégie de testing de code legacy : &lta href=&quot;https://twitter.com/dgageot&quot;&gt;David Gageot&lt/a&gt; et &lta href=&quot;https://twitter.com/morlhon&quot;&gt;Jean-Laurent Morlhon&lt/a&gt;&lt/h3&gt;Cette deuxième session était également un Hands on labs. David et Jean-Laurent nous ont remis un projet &quot;legacy&quot; (code compliqué, 0 test, ...) en début de session, et le but était d&apos;améliorer le code sans tout en garantissant la non régression pendant ces trois heures. David et Jean-Laurent nous donnaient les clés méthodologiques afin de pouvoir atteindre cet objectif au fur et à mesure de la session.&ltbr/&gt;J&apos;ai personnellement beaucoup aimé l&apos;exercice qui semble plus proche de notre travail de tout les jours.&ltbr/&gt;Il s&apos;est par contre avéré que ils ont été un peu ambitieux sur le niveau de difficulté de l&apos;exercice, il faudra sans doute simplifier un peu ce code legacy avant de le confier aux participants la prochaine fois.&ltbr/&gt;&ltbr/&gt; &lth3&gt;3615 Cloud@Devoxx : &lta href=&quot;https://twitter.com/ndeloof&quot;&gt;Nicolas De Loof&lt/a&gt; et &lta href=&quot;https://twitter.com/lhuet35&quot;&gt;Laurent Huet&lt/a&gt;&lt/h3&gt;Cette session était très particulière, et relevait plus de la détente que d&apos;une réelle conférence, mais franchement, après avoir fait 2x3h de TPs, c&apos;était plus qu&apos;utile. Bref un super moment, un Nicolas De Loof toujours aussi drole, et un Laurent Huet qui nous montre ses talents de bricoleur. Ils ont réussi à nous montrer un minitel permettant de déployer un application java dans le cloud!.&ltbr/&gt;&ltbr/&gt; &lth3&gt;Golo, un language simple et léger basé sur invokedynamic : &lta href=&quot;https://twitter.com/jponge&quot;&gt;Julien Ponge&lt/a&gt;&lt/h3&gt;Golo c&apos;est quoi? C&apos;est un nouveau language que ne se prend pas la tête! Il a surtout été créer pour des besoins particulier. Ce qui fut agréable sur cette session, c&apos;est que Julien ne se prenait pas la tête et ne manquait pas d&apos;humour. Bref, super moment!&ltbr/&gt;Pour les curieux, les slides sont déjà disponibles sur &lta href=&quot;https://speakerdeck.com/jponge/golo-at-devoxx-france-2013&quot;&gt;Speaker Deck&lt/a&gt;.&ltbr/&gt;&ltbr/&gt; &lth3&gt;Good Bad and Ugly Maven - a puzzler session : &lta href=&quot;https://twitter.com/ndeloof&quot;&gt;Nicolas De Loof&lt/a&gt; et &lta href=&quot;https://twitter.com/aheritier&quot;&gt;Arnaud Héritier&lt/a&gt;&lt/h3&gt;  Une nouvelle session de Nicolas De Loof, cette fois accompagné de son co-écrivain d&apos;un livre sur maven : Arnaud Héritier. J&apos;ai passé un super moment, et à la vue de ma timeline, je ne suis pas le seul! Je pense que cette session fera partie des sessions à ne pas rater sur Parlays.&ltbr/&gt;&ltbr/&gt;&ltbr/&gt; Cette première journée est maintenant terminée, super fatigante, mais plein de choses apprises, vivement la suivante!&ltbr/&gt;&ltbr/&gt; PS : Cet article n&apos;ayant pas été relu, merci donc de pardonner les fautes :)

          </description>
      </item>
      
      <item>
          <title>Code Story : la sélection finale</title>
          <link>http://www.ybonnel.fr/2013/02/code-story-la-selection-finale.html</link>
          <pubDate>Mon, 25 Feb 2013 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2013/02/code-story-la-selection-finale.html</guid>
          <description>
              &ltp&gt;Si vous me suivez sur twitter, vous savez sans doute déjà que Jeudi dernier (21/02) avait lieu la finale de Code Story. Je vais tenter de vous raconter comment s&apos;est passée cette soirée haute en stress&lt/p&gt; &lth3&gt;Le lieu&lt/h3&gt;&ltp&gt;Cette soirée s&apos;est passée chez google à Paris. En tant que fanboy Google, ça suffisait déjà à faire de cette soirée une super soirée :)&lt/p&gt;&ltp&gt;Pour ceux qui ne connaissent pas les bureaux de Google, je peux vous dire un truc, c&apos;est que ça fait envie. Pour vous faire baver, voici simplement la photo du &quot;coin&quot; fumeurs :&lt/p&gt;&lta href=&quot;http://4.bp.blogspot.com/-LNYFsSEdl_I/USsa3Iz2E1I/AAAAAAAAR-A/H7xqyc4RcbM/s1600/fumeurs_google.jpg&quot; imageanchor=&quot;1&quot; &gt;&ltimg border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-LNYFsSEdl_I/USsa3Iz2E1I/AAAAAAAAR-A/H7xqyc4RcbM/s320/fumeurs_google.jpg&quot; /&gt;&lt/a&gt;&ltbr/&gt;&ltbr/&gt; &lth3&gt;Le déroulement&lt/h3&gt;&ltp&gt;Tout est expliqué sur le &lta href=&quot;http://code-story.net/2013/02/21/concours-2013-phase-2.html&quot;&gt;blog de Code Story&lt/a&gt;, voici cependant un petit résumé. On avait des &lta href=&quot;http://code-story.net/data/codestory2013.json&quot;&gt;données&lt/a&gt; avec pour chaque participant à Code Story, sa ville, trois trucs qu&apos;il aime et deux trucs qu&apos;il n&apos;aime pas. Avec ça on devait construire un site internet from scratch permettant aux participants de connaître ceux avec qui ils ont des atomes crochus.&lt/p&gt;&ltbr/&gt;&lth3&gt;Notre participation&lt/h3&gt;&ltp&gt;Les participants étaient par binômes pour ce concours. J&apos;étais pour ma part avec Alexandre Ardhuin (&lta href=&quot;https://twitter.com/a14n&quot;&gt;@a14n&lt/a&gt;).&lt/p&gt;&ltp&gt;Nous sommes arrivés les mains dans les poches sans rien avoir préparé (ce qui nous a sans doute fait défaut). La première étape a donc été de monter une stack Web et de publier ça pour que ce soit accessible sur Internet. Cette étape nous a pris à peu près 1 heure, à la moitié du temps nous avions donc un magnifique site web accessible sur Internet qui affichait &quot;coucou&quot;...&lt/p&gt;&ltp&gt;Pour afficher autre chose que &quot;coucou&quot;, nous avons utilisé le framework Angular.js ce qui nous a permis d&apos;afficher rapidement la liste des participants, le tout codé à l&apos;arrache dans un seul fichier &lta href=&quot;https://github.com/ybonnel/CodeStoryFinale/commit/baeb84020f14a608e3b114ef81bd8c51bd98e8f5&quot;&gt;index.html&lt/a&gt;&lt/p&gt;&ltp&gt;Alexandre est ensuite parti sur une présentation géographique des participants via Google Map, mais il n&apos;a pas pu aller au bout à cause des quotas sur le geo-codage, dommage...&lt/p&gt;&ltp&gt;Je suis pour ma part parti sur le refactoring du code pour séparer Javascript, templates HTML et index.html afin de pouvoir mettre en place les routes Angular.js. Tout cela afin d&apos;obtenir un lien par participant affichant les détails de celui-ci. Toutefois, je suis resté bloqué sur de la syntaxe Javascript pendant au moins 10 minutes :&lt/p&gt;&ltp&gt;&ltpre class=&quot;brush:javascript&quot;&gt;&ltbr /&gt;angular.module(&apos;CodeStory&apos;);&ltbr /&gt;&lt/pre&gt;différent de : &ltpre class=&quot;brush:javascript&quot;&gt;&ltbr /&gt;angular.module(&apos;CodeStory&apos;, []);&ltbr /&gt;&lt/pre&gt;Dans le premiers cas, rien ne s&apos;affiche, et l&apos;erreur dans le console est : &quot;Error: No module: CodeStory&quot;, en bref, un compilateur c&apos;est pas si mal! &lt/p&gt;&ltp&gt;Ce refactoring m&apos;a pris beaucoup de temps du coup (environ 20 minutes), et par conséquent il nous restait 25 minutes à peine pour faire la page de détail d&apos;un participant. Nous avons mis environ 15 minutes à mettre en place une page affichant les personnes de la même ville, puis 7 minutes pour afficher les personnes ayant un &quot;Like&quot; en commun. Le &quot;git push&quot; permettant de déployer la dernière fonctionnalité a été fait sur le gong (heureusement qu&apos;on avait un déploiement simplifié!).&lt/p&gt;&ltp&gt;Le code final est dispo sur &lta href=&quot;https://github.com/ybonnel/CodeStoryFinale&quot;&gt;github&lt/a&gt;.&lt/p&gt; &lth3&gt;Le résultat&lt/h3&gt;&ltp&gt;Une fois l&apos;épreuve terminée, chaque binôme a eu 3 minutes pour présenter l&apos;application aux jury. Nous sommes passés en premier, ce qui a permis de faire rapidement retomber le stress...&lt/p&gt;&ltp&gt;Au final c&apos;est Xavier Hanin (&lta href=&quot;https://twitter.com/xavierhanin&quot;&gt;@Xavierhanin&lt/a&gt;) et Christophe Labouisse (&lta href=&quot;https://twitter.com/XtlCnslt&quot;&gt;@XtlCnslt&lt/a&gt;) qui ont gagné, et nous avons été second. Un grand bravo à eux, et je leur donne rendez-vous à Devoxx France pour les voir en action :)&lt/p&gt; &lth3&gt;Nos erreurs&lt/h3&gt;&ltp&gt;Notre première erreur a été de venir les mains dans les poches, il était prévisible que le Jury allait nous demander de coder une appli Web, si nous étions venus avec une stack Web prête à déployer, nous aurions gagné une heure...&lt/p&gt;&ltp&gt;N&apos;ayant pas de stack web prête à déployer nous aurions dû partir sur un site directement hébergé sur github, n&apos;ayant jamais utilisé le backend, cela aurait fait l&apos;affaire, et nous aurions encore une fois gagné une heure...&lt/p&gt;&ltp&gt;Pour finir, voici : &ltul&gt;&ltli&gt;Ce que nous avons sorti à la fin du concours : &lta href=&quot;http://serveur.ybonnel.fr:8080&quot;&gt;http://serveur.ybonnel.fr:8080&lt/a&gt;&lt/li&gt;&ltli&gt;Ce que nous aurions pu sortir avec l&apos;heure de gagnée : &lta href=&quot;http://ybonnel.github.com/CodeStoryFinale&quot;&gt;http://ybonnel.github.com/CodeStoryFinale&lt/a&gt;&lt/li&gt;&lt/ul&gt;Pour les plus curieux le diff est dispo sur &lta href=&quot;https://github.com/ybonnel/CodeStoryFinale/compare/f3b6d35e07172deae6d5322a8f4fab0059538a9d...gh-pages&quot;&gt;github&lt/a&gt;&lt/p&gt;&ltbr/&gt;&ltbr/&gt;&ltp&gt;Si vous avez eu le courage de lire jusque là, vous aurez peut-être le courage de regarder la &lta href=&quot;http://www.youtube.com/watch?v=c26ORroLSAQ&quot;&gt;vidéo&lt/a&gt;!&lt/p&gt; 

          </description>
      </item>
      
      <item>
          <title>Code Story en java : Jajascript et les performances</title>
          <link>http://www.ybonnel.fr/2013/02/code-story-en-java-jajascript-et-les.html</link>
          <pubDate>Tue, 5 Feb 2013 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2013/02/code-story-en-java-jajascript-et-les.html</guid>
          <description>
              &ltstyle type=&quot;text/css&quot;&gt; .code {  margin: 0 2em 0 2em;  padding: 1em;  background: rgb(230,244,231);  border: 1px solid rgb(89,180,89);  white-space: pre-wrap; /* CSS3 */  white-space: -moz-pre-wrap; /* Mozilla, post millennium */  white-space: -pre-wrap; /* Opera 4-6 */  white-space: -o-pre-wrap; /* Opera 7 */  word-wrap: break-word; /* Internet Explorer 5.5+ */ }  &lt/style&gt; &ltp&gt;Cet article est le dernier d&apos;une série de trois articles sur ma participation à Code Story en Java. Les articles précédents sont : &ltul&gt;&ltli&gt;&lta href=&quot;www.ybonnel.fr/2013/02/ma-participation-codestory-en-java-intro.html&quot;&gt;Ma participation à CodeStory en java : Intro&lt/a&gt;&lt/li&gt;&ltli&gt;&lta href=&quot;http://www.ybonnel.fr/2013/02/codestory-en-java-scalaskel-et-la.html&quot;&gt;CodeStory en java : Scalaskel et la calculette&lt/a&gt;&lt/li&gt;&lt/ul&gt;Je vais essayer de vous faire un retour sur l&apos;étape qui a donné le plus de difficultés à tous les participants : Jajascript. &lt/p&gt; &lth1&gt;L&apos;énoncé&lt/h1&gt;&ltp&gt;Voici l&apos;énoncé tel que nous l&apos;avons reçu : &ltdiv style=&quot;border:1px solid black&quot;&gt;&ltblockquote&gt;&lth2 id=&quot;location_dastronef_sur_jajascript&quot;&gt;Location d’astronef sur Jajascript&lt/h2&gt;&lt/blockquote&gt;&ltblockquote&gt;&ltp&gt;Votre cousin par alliance, Martin O. sur la planète Jajascript vient de monter sa petite entreprise de vol spatial privé: Jajascript Flight Rental. Il loue aux grosses corporations son astronef lorsqu’elles ont de fortes charges ou un pépin avec leurs propres appareils. Il s’occupe de la maintenance et de l’entretien de son petit astronef. Il ne pouvait s’en payer qu’un pour démarrer.&lt/p&gt; &ltp&gt;Ces grosses corporations envoient des commandes de location qui consistent en un intervalle de temps, et le prix qu’ils sont prêts à payer pour louer l’astronef durant cet intervalle.&lt/p&gt; &ltp&gt;Les commandes de tous les clients sont connues plusieurs jours à l’avance. Ce qui permet de faire un planning pour une journée. Les commandes viennent de plusieurs sociétés différentes et parfois elles se chevauchent. On ne peut donc pas toutes les honorer.&lt/p&gt; &ltp&gt;Idéalement, il faut donc être capable de prendre les plus rentables, histoire de maximiser les gains de sa petite entreprise, et de s’acheter d’autres astronefs. Votre cousin passe des heures à trouver le planning idéal et vous demande &ltstrong&gt;pour un planning donné de calculer une solution qui maximise son gain&lt/strong&gt;.&lt/p&gt; &lth3 id=&quot;exemple&quot;&gt;Exemple&lt/h3&gt; &ltp&gt;Considérez par exemple le cas où la JajaScript Flight Rental à 4 commandes :&lt/p&gt;&lt/blockquote&gt;&ltpre class=&quot;code&quot;&gt;&ltcode&gt;MONAD42 : heure de départ 0, durée 5, prix 10&ltbr /&gt;META18 : heure de départ 3, durée 7, prix 14&ltbr /&gt;LEGACY01 : heure de départ 5, durée 9, prix 8&ltbr /&gt;YAGNI17 : heure de départ 5, durée 9, prix 7&lt/code&gt;&lt/pre&gt;&ltblockquote&gt;&ltp&gt;La solution optimale consiste à accepter MONAD42 et LEGACY01, et le revenu est de &ltcode&gt;10 + 8 = 18&lt/code&gt;. Remarquez qu’une solution à partir de MONAD42 et YAGNI17 est faisable (l’avion serait loué sans interruption de 0 à 14) mais non optimale car le bénéfice ne serait que de 17.&lt/p&gt; &lth3 id=&quot;prcisions&quot;&gt;Précisions&lt/h3&gt; &ltp&gt;L’identifiant d’un vol ne dépasse jamais 50 caractères, les heures de départs, durée et prix sont des entiers positifs raisonnablement grands.&lt/p&gt; &lth3 id=&quot;serveur&quot;&gt;Serveur&lt/h3&gt; &ltp&gt;Votre serveur doit répondre aux requêtes http POST de la forme &ltcode&gt;http://serveur/jajascript/optimize&lt/code&gt; avec un payload de la forme :&lt/p&gt;&lt/blockquote&gt;&ltpre class=&quot;code&quot;&gt;&ltcode&gt;[&ltbr /&gt;    { &quot;VOL&quot;: &quot;NOM_VOL&quot;, &quot;DEPART&quot;: HEURE, &quot;DUREE&quot;: DUREE, &quot;PRIX&quot;: PRIX }, ...&ltbr /&gt;]&lt/code&gt;&ltbr /&gt;&lt/pre&gt;&ltblockquote&gt;&ltp&gt;En reprenant l’exemple ci dessus :&lt/p&gt;&lt/blockquote&gt;&ltpre class=&quot;code&quot;&gt;&ltcode&gt;[&ltbr /&gt;    { &quot;VOL&quot;: &quot;MONAD42&quot;, &quot;DEPART&quot;: 0, &quot;DUREE&quot;: 5, &quot;PRIX&quot;: 10 },&ltbr /&gt;    { &quot;VOL&quot;: &quot;META18&quot;, &quot;DEPART&quot;: 3, &quot;DUREE&quot;: 7, &quot;PRIX&quot;: 14 },&ltbr /&gt;    { &quot;VOL&quot;: &quot;LEGACY01&quot;, &quot;DEPART&quot;: 5, &quot;DUREE&quot;: 9, &quot;PRIX&quot;: 8 },&ltbr /&gt;    { &quot;VOL&quot;: &quot;YAGNI17&quot;, &quot;DEPART&quot;: 5, &quot;DUREE&quot;: 9, &quot;PRIX&quot;: 7 }&ltbr /&gt;]&lt/code&gt;&lt/pre&gt;&ltblockquote&gt;&ltp&gt;Vous devrez répondre le résultat suivant :&lt/p&gt;&lt/blockquote&gt;&ltpre class=&quot;code&quot;&gt;&ltcode&gt;{&ltbr /&gt;      &quot;gain&quot; : 18,&ltbr /&gt;      &quot;path&quot; : [&quot;MONAD42&quot;,&quot;LEGACY01&quot;]&ltbr /&gt;}&lt/code&gt;&lt/pre&gt;&ltblockquote&gt;&ltp&gt;Le gain représentant la somme optimale, path représentant l’ordre des vols.&lt/p&gt; &ltp&gt;Bons calculs !&lt/p&gt;&lt/blockquote&gt;&lt/div&gt;&ltbr/&gt; &lth1&gt;Premier algo très naïf &lt/h1&gt;&ltp&gt;Le premier algo que j&apos;ai pondu était très naïf, je calculais absolument toutes les solutions possibles (voir plusieurs fois chaque solution). Voici la méthode principale de l&apos;époque : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;private void calculate(Planning actualPlanning, Collection&ltCommande&gt; commandesToAdd) {&ltbr /&gt;    if (actualPlanning != null) {&ltbr /&gt;        addToPlanningsIfBetter(actualPlanning);&ltbr /&gt;    }&ltbr /&gt;    for (Commande commandeToAdd : commandesToAdd) {&ltbr /&gt;        if (actualPlanning == null || actualPlanning.canAddCommande(commandeToAdd)) {&ltbr /&gt;            Planning newPlanning = new Planning(actualPlanning);&ltbr /&gt;            newPlanning.addCommande(commandeToAdd);&ltbr /&gt;            Collection&ltCommande&gt; newCommandesToAdd =&ltbr /&gt;                Collections2.filter(commandesToAdd, new FilterCommande(commandeToAdd));&ltbr /&gt;            calculate(newPlanning, newCommandesToAdd);&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Dans cet algo récursif, je parcours toutes les commandes, et pour chaque commande, je regarde si elle est compatible à mon planning actuel, si elle l&apos;est je l&apos;ajoute au planning et je fais l&apos;appel récursif. Cet algo est donc ni élégant ni performant, mais a le mérite de marcher. Pour les étapes précédentes cela suffisait, je me suis donc arrêté là, enfin jusqu&apos;à la surprise. &lt/p&gt;&ltbr/&gt; &lth1&gt;La surprise&lt/h1&gt;&ltp&gt;Pour Jajascript, ils nous ont fait une petite surprise, ils se sont mis à tester les performances... La méthode pour tester les performances était la suivante : le robot envoie une requête avec un certain nombre de commandes, si je réponds en moins de 30 secondes, il en envoie plus, et ce jusqu&apos;à ce que je réponde en plus de 30 secondes. Voici la liste complète des marches utilisées par le robot : &ltul&gt;&ltli&gt;5 commandes&lt/li&gt;&ltli&gt;10 commandes&lt/li&gt;&ltli&gt;15 commandes&lt/li&gt;&ltli&gt;20 commandes&lt/li&gt;&ltli&gt;25 commandes&lt/li&gt;&ltli&gt;30 commandes&lt/li&gt;&ltli&gt;35 commandes&lt/li&gt;&ltli&gt;40 commandes&lt/li&gt;&ltli&gt;45 commandes&lt/li&gt;&ltli&gt;50 commandes&lt/li&gt;&ltli&gt;55 commandes&lt/li&gt;&ltli&gt;60 commandes&lt/li&gt;&ltli&gt;65 commandes&lt/li&gt;&ltli&gt;70 commandes&lt/li&gt;&ltli&gt;75 commandes&lt/li&gt;&ltli&gt;80 commandes&lt/li&gt;&ltli&gt;85 commandes&lt/li&gt;&ltli&gt;90 commandes&lt/li&gt;&ltli&gt;95 commandes&lt/li&gt;&ltli&gt;100 commandes&lt/li&gt;&ltli&gt;150 commandes&lt/li&gt;&ltli&gt;250 commandes&lt/li&gt;&ltli&gt;500 commandes&lt/li&gt;&ltli&gt;1000 commandes&lt/li&gt;&ltli&gt;1500 commandes&lt/li&gt;&ltli&gt;2000 commandes&lt/li&gt;&ltli&gt;2500 commandes&lt/li&gt;&ltli&gt;3000 commandes&lt/li&gt;&ltli&gt;3500 commandes&lt/li&gt;&ltli&gt;4000 commandes&lt/li&gt;&ltli&gt;5000 commandes&lt/li&gt;&ltli&gt;10000 commandes&lt/li&gt;&ltli&gt;50000 commandes&lt/li&gt;&lt/ul&gt;Du coup mon premier algo naïf répondait en plus de 30 secondes à partir de 30 commandes (nous ne connaissions pas le max à l&apos;époque qui semblait être aux alentours de 100 commandes). Il a donc fallu optimiser tout ça. Je ne vais pas vous présenter tous les commits d&apos;optimisation par lesquels je suis passés (ça représente près de 50 commits...). Je vais plutôt tenter de vous montrer les grandes étapes ainsi que les performances associées. Pour les performances, je n&apos;ai inclus que le calcul brut (sans la couche HTTP ou Json). &lt/p&gt;&ltbr/&gt; &lth1&gt;Algo récursif optimisé&lt/h1&gt;&ltp&gt;Après quelques commits, je suis arrivé à un algo récursif un peu plus optimisé : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;private void calculate(Planning actualPlanning, Collection&ltCommande&gt; commandesToAdd) {&ltbr /&gt;    if (actualPlanning != null) {&ltbr /&gt;        addToPlanningsIfBetter(actualPlanning);&ltbr /&gt;    }&ltbr /&gt;    Iterator&ltCommande&gt; itCommande = commandesToAdd.iterator();&ltbr /&gt;&ltbr /&gt;    while (itCommande.hasNext()) {&ltbr /&gt;        Commande commandeToAdd = itCommande.next();&ltbr /&gt;        itCommande.remove();&ltbr /&gt;        if (actualPlanning == null || actualPlanning.canAddCommande(commandeToAdd)) {&ltbr /&gt;            calculate(new Planning(actualPlanning).addCommande(commandeToAdd), newArrayList(commandesToAdd));&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Les grosses différences pour en arriver là sont (pas toutes visibles dans le code ci-dessus) : &ltul&gt;&ltli&gt;Tri des commandes par heure de départ croissante&lt/li&gt;&ltli&gt;On ne stocke que le meilleur planning&lt/li&gt;&ltli&gt;On enlève la commande courante avant de continuer dans la récursivité&lt/li&gt;&ltli&gt;On stocke l&apos;heure de fin d&apos;un planning afin de savoir rapidement si une commande est compatible avec&lt/li&gt;&lt/ul&gt;Pour les plus curieux, le diff complet est dispo sur &lta href=&quot;https://github.com/ybonnel/CodeStory/compare/ae22a5854164e1f5f8a2fb68c0c1a3b1899ef7fb...906502717dbb9d9cd22e8e625a40c643a4dec868&quot;&gt;github&lt/a&gt;. Cet algo tiens jusqu&apos;à 70 commandes à peu près (c&apos;est déjà beaucoup mieux, mais on est loin des 50000 commandes...). &lt/p&gt;&ltbr/&gt; &lth1&gt;Algo récursif très optimisé&lt/h1&gt;&ltp&gt;Afin d&apos;aller au bout des optimisations de l&apos;algo récursif, j&apos;ai modifié/enlevé tout ce qui prenait du temps sans changer l&apos;algo. L&apos;optimisation principale dans cette étape a été le passage en types primitifs avec utilisation de tableau d&apos;entier. Quand on regarde le code obtenu, on a un peu l&apos;impression de revoir du C... Toutes ces optimisations permettent tout de même d&apos;atteindre les 5000 commandes environs. Pour les plus curieux, le diff complet est disponible sur &lta href=&quot;https://github.com/ybonnel/CodeStory/compare/906502717dbb9d9cd22e8e625a40c643a4dec868...3a917905db23386d820f06ff68900a1a18884dcc&quot;&gt;github&lt/a&gt;. &lt/p&gt;&ltbr/&gt; &lth1&gt;Algo itératif&lt/h1&gt;&ltp&gt;Atteignant les limites du récursif, il a fallu passer à un algo itératif. Cet algo repose sur une pile des dernières solutions trouvées, afin de regarder dans ces solutions laquelle est la meilleure pour une commande donnée. Voici la méthode principale : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;private void calculateIteratif() {&ltbr /&gt;    // Parcours de toutes les commandes&ltbr /&gt;    for (int i=0; i&ltnbCommands;i++) {&ltbr /&gt;        Solution bestSolutionToAdd = null;&ltbr /&gt;        int bestPrice = -1;&ltbr /&gt;        for (Solution solution : lastSolutions) {&ltbr /&gt;            if (starts[i] &gt;= solution.heureFin&ltbr /&gt;                    &amp;&amp; solution.prix &gt; bestPrice ) {&ltbr /&gt;                bestSolutionToAdd = solution;&ltbr /&gt;                bestPrice = solution.prix;&ltbr /&gt;            }&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        lastSolutions.removeFirst();&ltbr /&gt;&ltbr /&gt;        boolean[] newAceptedCommands = Arrays.copyOf(bestSolutionToAdd.acceptedCommands, bestSolutionToAdd.acceptedCommands.length);&ltbr /&gt;        newAceptedCommands[i] = true;&ltbr /&gt;        Solution newSolution = new Solution(ends[i], bestSolutionToAdd.prix + prices[i], newAceptedCommands);&ltbr /&gt;        lastSolutions.addLast(newSolution);&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    for (Solution solution : lastSolutions) {&ltbr /&gt;        addToPlanningsIfBetter(solution.acceptedCommands, solution.prix);&ltbr /&gt;&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Ce passage en itératif permet d&apos;atteindre 200000 commandes environ (ce qui était suffisant pour le concours). Pour les plus curieux, le diff complet est disponible sur &lta href=&quot;https://github.com/ybonnel/CodeStory/compare/3a917905db23386d820f06ff68900a1a18884dcc...002e7f474a8db0f85ae855926290b658740ec6b8&quot;&gt;github&lt/a&gt;&lt/p&gt;&ltbr/&gt; &lth1&gt;Algo itératif optimisé&lt/h1&gt;&ltp&gt;Je vais maintenant vous présenter le code final obtenu après encore quelques optimisations, et finalement un retour à de l&apos;objet pur (ce qui me fait perdre un peu en performance, mais rend le code tellement plus lisible). Avant d&apos;arriver à ce résultat, je suis passé par un BitSet plutôt qu&apos;un tableau de booléens, ce qui m&apos;avait fait gagner pas mal (classe à connaître donc). Si vous voulez voir tout les commits intermédiaires, ça se passe sur &lta href=&quot;https://github.com/ybonnel/CodeStory/compare/002e7f474a8db0f85ae855926290b658740ec6b8...master&quot;&gt;github&lt/a&gt;. &lt/p&gt;&ltp&gt;Voici tout d&apos;abord la classe Solution permettant de stocker une solution trouvée : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import com.google.common.base.Optional;&ltbr /&gt;import com.google.common.primitives.Ints;&ltbr /&gt;&ltbr /&gt;import java.util.LinkedList;&ltbr /&gt;import java.util.List;&ltbr /&gt;&ltbr /&gt;public class Solution implements Comparable&ltSolution&gt; {&ltbr /&gt;    public final int price;&ltbr /&gt;    public final int endTime;&ltbr /&gt;    public final Optional&ltSolution&gt; oldSolution;&ltbr /&gt;    public final Flight newFlight;&ltbr /&gt;&ltbr /&gt;    Solution(int price, Optional&ltSolution&gt; oldSolution, Flight newFlight) {&ltbr /&gt;        this.price = price;&ltbr /&gt;        this.oldSolution = oldSolution;&ltbr /&gt;        this.newFlight = newFlight;&ltbr /&gt;        this.endTime = newFlight.endTime;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public List&ltFlight&gt; getFlights() {&ltbr /&gt;&ltbr /&gt;        LinkedList&ltFlight&gt; flights = new LinkedList&ltFlight&gt;();&ltbr /&gt;        flights.add(newFlight);&ltbr /&gt;&ltbr /&gt;        Optional&ltSolution&gt; currentSolution = oldSolution;&ltbr /&gt;        while (currentSolution.isPresent()) {&ltbr /&gt;            flights.addFirst(currentSolution.get().newFlight);&ltbr /&gt;            currentSolution = currentSolution.get().oldSolution;&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        return flights;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public boolean isBetterThan(Optional&ltSolution&gt; bestSolutionToAdd) {&ltbr /&gt;        return !bestSolutionToAdd.isPresent() || price &gt; bestSolutionToAdd.get().price;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Override&ltbr /&gt;    public int compareTo(Solution o) {&ltbr /&gt;        return Ints.compare(price, o.price);&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Le point principal à noter dans cette classe, est la façon de stocker une solution. Plutôt que de stocker une image complète d&apos;une solution, on stocke la solution précédente plus la commande qu&apos;on lui a ajoutée. Cette technique permet d&apos;économiser énormément de mémoire, mais permet également de diminuer énormément le coup de la création d&apos;une solution (appel au constructeur). &lt/p&gt;&ltp&gt;Voici maintenant la classe JajascriptService contenant tout l&apos;algo : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import com.google.common.base.Function;&ltbr /&gt;import com.google.common.base.Optional;&ltbr /&gt;import com.google.common.collect.Lists;&ltbr /&gt;&ltbr /&gt;import java.util.Collections;&ltbr /&gt;import java.util.Iterator;&ltbr /&gt;import java.util.LinkedList;&ltbr /&gt;import java.util.List;&ltbr /&gt;&ltbr /&gt;public class JajascriptService {&ltbr /&gt;&ltbr /&gt;    /**&ltbr /&gt;     * Flights to optimize.&ltbr /&gt;     */&ltbr /&gt;    private List&ltFlight&gt; flights;&ltbr /&gt;    /**&ltbr /&gt;     * Last solutions found.&ltbr /&gt;     */&ltbr /&gt;    private LinkedList&ltSolution&gt; lastSolutions = new LinkedList&ltSolution&gt;();&ltbr /&gt;&ltbr /&gt;&ltbr /&gt;    public JajascriptService(List&ltFlight&gt; flights) {&ltbr /&gt;        this.flights = flights;&ltbr /&gt;        Collections.sort(this.flights);&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public JajaScriptResponse calculate() {&ltbr /&gt;&ltbr /&gt;        Solution solution = calculateSolution();&ltbr /&gt;&ltbr /&gt;        // Construct the path with the array of accepted flights.&ltbr /&gt;        List&ltString&gt; path = Lists.transform(solution.getFlights(), new Function&ltFlight, String&gt;() {&ltbr /&gt;            @Override&ltbr /&gt;            public String apply(Flight input) {&ltbr /&gt;                return input.getName();&ltbr /&gt;            }&ltbr /&gt;        });&ltbr /&gt;&ltbr /&gt;        return new JajaScriptResponse(solution.price, path);&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private static class BestSolutions {&ltbr /&gt;        Optional&ltSolution&gt; bestCompatibleSolution = Optional.absent();&ltbr /&gt;        Optional&ltSolution&gt; bestSolutionWithEquivalentEndTime = Optional.absent();&ltbr /&gt;&ltbr /&gt;        int getPriceOfCompatibleSolution() {&ltbr /&gt;            return getPriceOfAnOptionalSolution(bestCompatibleSolution);&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        int getPriceOfEquivalentEndTimeSolution() {&ltbr /&gt;            return getPriceOfAnOptionalSolution(bestSolutionWithEquivalentEndTime);&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        private static int getPriceOfAnOptionalSolution(Optional&ltSolution&gt; optionalSolution) {&ltbr /&gt;            return optionalSolution.isPresent() ? optionalSolution.get().price : 0;&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    /**&ltbr /&gt;     * @return an optimal solution.&ltbr /&gt;     */&ltbr /&gt;    private Solution calculateSolution() {&ltbr /&gt;        // Iterate on all flights.&ltbr /&gt;        for (Flight flight : flights) {&ltbr /&gt;            // Pre-calculate endTime for future needs.&ltbr /&gt;            flight.calculateEndTime();&ltbr /&gt;&ltbr /&gt;            BestSolutions bestSolutions = getBestSolutionsForAFlight(flight);&ltbr /&gt;&ltbr /&gt;            int newPrice = flight.price + bestSolutions.getPriceOfCompatibleSolution();&ltbr /&gt;&ltbr /&gt;            if (newPrice &gt; bestSolutions.getPriceOfEquivalentEndTimeSolution()) {&ltbr /&gt;                // Add the new solution to FIFO only if it&apos;s better than other solution with lower or equal endTime.&ltbr /&gt;                lastSolutions.addLast(new Solution(newPrice, bestSolutions.bestCompatibleSolution, flight));&ltbr /&gt;            }&ltbr /&gt;&ltbr /&gt;            if (bestSolutions.bestCompatibleSolution.isPresent()) {&ltbr /&gt;                // If we found a compatible solution, we remove all solution with endTime lower than last flight startTime and lower price.&ltbr /&gt;                removeOldSolutions(flight.startTime, bestSolutions.bestCompatibleSolution.get().price);&ltbr /&gt;            }&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        // Search the best solution in FIFO.&ltbr /&gt;        Collections.sort(lastSolutions);&ltbr /&gt;        return lastSolutions.getLast();&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    /**&ltbr /&gt;     * Remove all solution with lower or equal endTime than lastStartTime and lower price than priceOfCompatibleSolution.&ltbr /&gt;     */&ltbr /&gt;    private void removeOldSolutions(int lastStartTime, int priceOfCompatibleSolution) {&ltbr /&gt;        Iterator&ltSolution&gt; lastSolutionIterator= lastSolutions.iterator();&ltbr /&gt;&ltbr /&gt;        while (lastSolutionIterator.hasNext()) {&ltbr /&gt;            Solution oldSolution = lastSolutionIterator.next();&ltbr /&gt;            if (oldSolution.endTime &lt= lastStartTime&ltbr /&gt;                    &amp;&amp; oldSolution.price &lt priceOfCompatibleSolution) {&ltbr /&gt;                lastSolutionIterator.remove();&ltbr /&gt;            }&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    /**&ltbr /&gt;     * Get the best solution in {@link JajascriptService#lastSolutions} for a flight.&ltbr /&gt;     */&ltbr /&gt;    private BestSolutions getBestSolutionsForAFlight(Flight flight) {&ltbr /&gt;        BestSolutions bestSolutions = new BestSolutions();&ltbr /&gt;        // Search the best solution in FIFO we can take for this flight.&ltbr /&gt;        for (Solution solution : lastSolutions) {&ltbr /&gt;            if (flight.startTime &gt;= solution.endTime &amp;&amp; solution.isBetterThan(bestSolutions.bestCompatibleSolution)) {&ltbr /&gt;                bestSolutions.bestCompatibleSolution = Optional.of(solution);&ltbr /&gt;            }&ltbr /&gt;            if (flight.endTime &gt;= solution.endTime &amp;&amp; solution.isBetterThan(bestSolutions.bestSolutionWithEquivalentEndTime)) {&ltbr /&gt;                bestSolutions.bestSolutionWithEquivalentEndTime = Optional.of(solution);&ltbr /&gt;            }&ltbr /&gt;        }&ltbr /&gt;        return bestSolutions;&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Cette version étant plutôt bien commentée, je vous laisse lire les commentaires... &lt/p&gt;&ltp&gt;Au final, cette version permet de traiter 1 000 000 de commandes en 200 millisecondes. &lt/p&gt;&ltbr/&gt; &lth1&gt;Différences entre les algos&lt/h1&gt;&ltp&gt;En guise de récapitulatif, voici un petit graphique avec les performances de tous les algos&lt/p&gt;&ltdiv id=&quot;perf-timeline&quot;&gt;&lt/div&gt; &ltscript src=&quot;http://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.0/jquery.min.js&quot;&gt;&lt/script&gt;&ltscript src=&quot;http://cdnjs.cloudflare.com/ajax/libs/highcharts/2.3.1/highcharts.js&quot;&gt;&lt/script&gt;&ltscript&gt;var chart = new Highcharts.Chart({  chart: {   renderTo: &apos;perf-timeline&apos;,   type: &apos;line&apos;  },  title: {   text:&apos;Performances Jajascript&apos;  },  xAxis: {   title: {    text:&apos;Nb commandes&apos;   }  },  yAxis: {   title: {    text:&apos;Temps (ms)&apos;   }  },  series: [   {    &quot;name&quot;:&quot;Récursif&quot;,    &quot;data&quot;: [     [5,10],     [10,0],     [15,1],     [20,3],     [25,6],     [30,29],     [35,8],     [40,23],     [45,105],     [50,369],     [55,787],     [60,3684],     [65,6703],     [70,13297]    ]   },   {    &quot;name&quot;:&quot;Récursif optimisé&quot;,    &quot;data&quot;:[     [5,21],     [10,0],     [15,0],     [20,0],     [25,0],     [30,0],     [35,0],     [40,0],     [45,0],     [50,0],     [55,0],     [60,0],     [65,0],     [70,0],     [75,0],     [80,0],     [85,1],     [90,1],     [95,2],     [100,2],     [150,0],     [250,1],     [500,21],     [1000,112],     [1500,303],     [2000,572],     [2500,1338],     [3000,2089],     [3500,3239],     [4000,5015],     [5000,11039]    ]   },   {    &quot;name&quot;:&quot;Itératif&quot;,    &quot;data&quot;:[     [5,21],     [10,0],     [15,0],     [20,0],     [25,0],     [30,0],     [35,0],     [40,0],     [45,0],     [50,1],     [55,0],     [60,0],     [65,0],     [70,0],     [75,3],     [80,1],     [85,1],     [90,1],     [95,0],     [100,0],     [150,0],     [250,1],     [500,1],     [1000,3],     [1500,3],     [2000,4],     [2500,6],     [3000,10],     [3500,8],     [4000,11],     [5000,11],     [10000,34],     [50000,634],     [100000,1929],     [200000,7786],     [500000,54630]    ]   },   {    &quot;name&quot;:&quot;Itératif optimisé&quot;,    &quot;data&quot;:[     [5,11],     [10,0],     [15,0],     [20,0],     [25,0],     [30,0],     [35,0],     [40,0],     [45,0],     [50,0],     [55,0],     [60,0],     [65,0],     [70,0],     [75,0],     [80,0],     [85,0],     [90,0],     [95,0],     [100,0],     [150,1],     [250,1],     [500,3],     [1000,7],     [1500,4],     [2000,3],     [2500,3],     [3000,6],     [3500,4],     [4000,4],     [5000,4],     [10000,4],     [50000,19],     [100000,32],     [200000,49],     [500000,100],     [1000000,197],     [1500000,272],     [2000000,533],     [2500000,2280],     [3000000,3046],     [3500000,1045],     [4000000,1049],     [4500000,1235],     [5000000,4606],     [5500000,10630],     [6000000,15386]    ]   }  ] }); &lt/script&gt;&ltbr/&gt;&ltbr/&gt;&ltbr/&gt; &ltp&gt;J&apos;espère que ce retour sur ma participation à ce concours passionnant vous a plu. J&apos;espère avoir le temps de vous faire un petit retour sur ma participation en &lta href=&quot;https://github.com/ybonnel/CodeStory-ceylon&quot;&gt;Ceylon&lt/a&gt; et en &lta href=&quot;https://github.com/ybonnel/CodeStory-scala&quot;&gt;Scala&lt/a&gt;, mais je ne vous garantis rien... &lt/p&gt;  

          </description>
      </item>
      
      <item>
          <title>CodeStory en java : Scalaskel et la calculette</title>
          <link>http://www.ybonnel.fr/2013/02/codestory-en-java-scalaskel-et-la.html</link>
          <pubDate>Mon, 4 Feb 2013 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2013/02/codestory-en-java-scalaskel-et-la.html</guid>
          <description>
              &ltstyle type=&quot;text/css&quot;&gt; .code {  margin: 0 2em 0 2em;  padding: 1em;  background: rgb(230,244,231);  border: 1px solid rgb(89,180,89);  white-space: pre-wrap; /* CSS3 */  white-space: -moz-pre-wrap; /* Mozilla, post millennium */  white-space: -pre-wrap; /* Opera 4-6 */  white-space: -o-pre-wrap; /* Opera 7 */  word-wrap: break-word; /* Internet Explorer 5.5+ */ }  &lt/style&gt;  &ltp&gt;Cet article fait suite à l&apos;article &lta href=&quot;http://www.ybonnel.fr/2013/02/ma-participation-codestory-en-java-intro.html&quot;&gt;Ma participation à CodeStory en java : Intro&lt/a&gt;.&ltbr/&gt;Le but de cet article va être de vous parler de deux étapes du concours CodeStory : Scalaskel et la Calculette en vous présentant mon implémentation en Java. &lt/p&gt;&ltbr/&gt; &lth1&gt;Scalaskel&lt/h1&gt;&ltp&gt;Voici l&apos;énoncé tel que nous l&apos;avons reçu par POST : &lt/p&gt; &ltdiv style=&quot;border:1px solid black&quot;&gt;&ltblockquote&gt;&lth2 id=&quot;lchoppe_de_monade_sur_scalaskel&quot;&gt;L’échoppe de monade sur Scalaskel.&lt/h2&gt; &ltp&gt;Sur la planète Scalaskel, une planète en marge de la galaxie, aux confins de l’univers, la monnaie se compte en cents, comme chez nous. 100 cents font un groDessimal. Le groDessimal est la monnaie standard utilisable partout sur toutes les planètes de l’univers connu. C’est un peu compliqué à manipuler, mais si on ne s’en sert pas y’a toujours des erreurs d’arrondis incroyables quand on les soustrait ou on les divise, c’est idiot, mais c’est comme ça. Sur Scalaskel, on utilise rarement des groDessimaux, on utilise des pièces plus petites : Le &ltstrong&gt;Foo&lt/strong&gt; vaut &ltstrong&gt;1 cent&lt/strong&gt;, le &ltstrong&gt;Bar&lt/strong&gt; vaut &ltstrong&gt;7 cents&lt/strong&gt;, le &ltstrong&gt;Qix&lt/strong&gt; vaut &ltstrong&gt;11 cents&lt/strong&gt; et le &ltstrong&gt;Baz&lt/strong&gt; vaut &ltstrong&gt;21 cents&lt/strong&gt;.&lt/p&gt; &ltp&gt;Vous tenez une échoppe de monade et autres variables méta-syntaxiques sur Scalaskel. Pour faire face à l’afflux de touristes étrangers avec les poches remplies de groDessimaux vous avez besoin d’écrire un programme qui pour toute somme de 1 à 100 cents, vous donnera toutes les décompositions possibles en pièces de &ltstrong&gt;Foo&lt/strong&gt;, &ltstrong&gt;Bar&lt/strong&gt;, &ltstrong&gt;Qix&lt/strong&gt; ou &ltstrong&gt;Baz&lt/strong&gt;.&lt/p&gt; &ltp&gt;Par exemple, 1 cent ne peut se décomposer qu’en une seule pièce &ltstrong&gt;Foo&lt/strong&gt;. Par contre 7 cents peuvent se décomposer soit en 7 pièces &ltstrong&gt;Foo&lt/strong&gt;, soit en 1 pièce &ltstrong&gt;Bar&lt/strong&gt;.&lt/p&gt; &lth2 id=&quot;serveur_web_&quot;&gt;Serveur Web :&lt/h2&gt; &ltp&gt;Votre serveur doit répondre aux requêtes http GET de la forme &ltcode&gt;http://serveur/scalaskel/change/X&lt/code&gt;, &ltcode&gt;X&lt/code&gt; étant une valeur en cents de 1 à 100 cents.&lt/p&gt; &ltp&gt;La réponse attendue est un json de la forme :&lt/p&gt;&lt/blockquote&gt;&ltpre class=&quot;code&quot;&gt;&ltcode&gt;[{“foo”: w, “bar”: x, “qix”: y, “baz”: z}, …]&lt/code&gt;&lt/pre&gt;&ltblockquote&gt;&ltp&gt;Exemples Pour &ltcode&gt;http://serveur/scalaskel/change/1&lt/code&gt; il faut répondre :&lt/p&gt;&lt/blockquote&gt;&ltpre class=&quot;code&quot;&gt;&ltcode&gt;[ {“foo”: 1} ]&lt/code&gt;&lt/pre&gt;&ltblockquote&gt;&ltp&gt;Pour &ltcode&gt;http://serveur/scalaskel/change/7&lt/code&gt; il faut répondre :&lt/p&gt;&lt/blockquote&gt;&ltpre class=&quot;code&quot;&gt;&ltcode&gt;[ {“foo”: 7}, {“bar”: 1} ]&lt/code&gt;&lt/pre&gt;&ltblockquote&gt;&ltp&gt;L’ordre des valeurs dans le tableau json, ainsi que le formatage n’a pas d’importance à partir du moment où c’est du json valide, il s’entend.&lt/p&gt; &ltp&gt;Bon courage !&lt/p&gt;&lt/blockquote&gt;&lt/div&gt;&ltp&gt;Première chose à mettre en place, le test unitaire (et oui, même si on est pressé, le TDD c&apos;est bien) : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import com.meterware.httpunit.WebConversation;&ltbr /&gt;import com.meterware.httpunit.WebResponse;&ltbr /&gt;&ltbr /&gt;import static org.junit.Assert.assertEquals;&ltbr /&gt;&ltbr /&gt;public class ScalaskelTest extends WebServerTestUtil {&ltbr /&gt;&ltbr /&gt;    @Test&ltbr /&gt;    public void should_answer_to_1cent() throws Exception {&ltbr /&gt;        WebConversation wc = new WebConversation();&ltbr /&gt;        WebResponse response = wc.getResponse(getURL() + &quot;/scalaskel/change/1&quot;);&ltbr /&gt;        assertEquals(200, response.getResponseCode());&ltbr /&gt;        assertEquals(&quot;[{\&quot;foo\&quot;:1}]&quot;, response.getText());&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Test&ltbr /&gt;    public void should_answer_to_7cent() throws Exception {&ltbr /&gt;        WebConversation wc = new WebConversation();&ltbr /&gt;        WebResponse response = wc.getResponse(getURL() + &quot;/scalaskel/change/7&quot;);&ltbr /&gt;        assertEquals(200, response.getResponseCode());&ltbr /&gt;        assertEquals(&quot;[{\&quot;foo\&quot;:7},{\&quot;bar\&quot;:1}]&quot;, response.getText());&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Test&ltbr /&gt;    public void should_answer_to_11cent() throws Exception {&ltbr /&gt;        WebConversation wc = new WebConversation();&ltbr /&gt;        WebResponse response = wc.getResponse(getURL() + &quot;/scalaskel/change/11&quot;);&ltbr /&gt;        assertEquals(200, response.getResponseCode());&ltbr /&gt;        assertEquals(&quot;[{\&quot;foo\&quot;:11},{\&quot;foo\&quot;:4,\&quot;bar\&quot;:1},{\&quot;qix\&quot;:1}]&quot;, response.getText());&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Test&ltbr /&gt;    public void should_answer_to_21cent() throws Exception {&ltbr /&gt;        WebConversation wc = new WebConversation();&ltbr /&gt;        WebResponse response = wc.getResponse(getURL() + &quot;/scalaskel/change/21&quot;);&ltbr /&gt;        assertEquals(200, response.getResponseCode());&ltbr /&gt;        assertEquals(&quot;[{\&quot;foo\&quot;:21},{\&quot;foo\&quot;:14,\&quot;bar\&quot;:1},{\&quot;foo\&quot;:10,\&quot;qix\&quot;:1},{\&quot;foo\&quot;:7,\&quot;bar\&quot;:2},{\&quot;foo\&quot;:3,\&quot;bar\&quot;:1,\&quot;qix\&quot;:1},{\&quot;bar\&quot;:3},{\&quot;baz\&quot;:1}]&quot;, response.getText());&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Rien d&apos;extraordinaire dans ce test, il contient seulement les cas basiques (en même temps, le calcul à la main est assez chiant comme ça). &lt/p&gt;&ltp&gt;Si vous avez lu l&apos;article précédent, vous savez que mon code en l&apos;état ne gère pas les requêtes par path du type &quot;/scalaskel/change/1&quot;, commençons donc par là. Dans la même idée que le &quot;QueryHandler&quot; présenté dans l&apos;article précendent, j&apos;ai d&apos;abord créé un &quot;PathHandler&quot; : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import fr.ybonnel.codestory.WebServerResponse;&ltbr /&gt;import javax.servlet.http.HttpServletRequest;&ltbr /&gt;&ltbr /&gt;public abstract class AbstractPathHandler {&ltbr /&gt;    public abstract WebServerResponse getResponse(HttpServletRequest request, String payLoad, String... params) throws Exception;&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;La &quot;request&quot; sert à récupérer deux choses : la méthode (GET/POST) et le path. Le payload est utile pour les énoncés et jajascript (données envoyées en POST). Et pour finir les params sont le résultat de l&apos;application d&apos;un pattern que nous verrons ensuite. &lt/p&gt;&ltp&gt;Tout comme pour les Query, j&apos;ai mis en place un enum relativement proche, mis à part qu&apos;il n&apos;a pas de méthodes abstraites. Cet enum gère de manière générique le routage avec la méthode et un pattern. Voici le code complet de cet enum : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import fr.ybonnel.codestory.WebServerResponse;&ltbr /&gt;import javax.servlet.http.HttpServletRequest;&ltbr /&gt;import javax.servlet.http.HttpServletResponse;&ltbr /&gt;import java.util.regex.Matcher;&ltbr /&gt;import java.util.regex.Pattern;&ltbr /&gt;&ltbr /&gt;public enum PathType {&ltbr /&gt;&ltbr /&gt;    INSERT_ENONCE(new InsertEnonceHandler(), &quot;/enonce/(\\d+)&quot;, &quot;POST&quot;),&ltbr /&gt;    GET_ENONCES(new GetEnoncesHandler(), &quot;/enonce(/)*&quot;, &quot;GET&quot;),&ltbr /&gt;    SCALASKEL_CHANGES(new ChangeScalaskelHandler(), &quot;/scalaskel/change/(\\d+)&quot;, &quot;GET&quot;),&ltbr /&gt;    JAJASCRIPT(new OptimizeJajascriptHandler(), &quot;/jajascript/optimize.*&quot;, &quot;POST&quot;);&ltbr /&gt;&ltbr /&gt;    private AbstractPathHandler handler;&ltbr /&gt;&ltbr /&gt;    private Pattern pathPattern;&ltbr /&gt;    private String method;&ltbr /&gt;&ltbr /&gt;    PathType(AbstractPathHandler handler, String pathPattern, String method) {&ltbr /&gt;        this.handler = handler;&ltbr /&gt;        this.pathPattern = Pattern.compile(pathPattern);&ltbr /&gt;        this.method = method;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;&ltbr /&gt;    public Matcher isThisPath(String method, String path) {&ltbr /&gt;        if (this.method.equals(method)) {&ltbr /&gt;            return pathPattern.matcher(path);&ltbr /&gt;        } else {&ltbr /&gt;            return null;&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public static WebServerResponse getResponse(HttpServletRequest request, String payLoad) throws Exception {&ltbr /&gt;        for (PathType onePath : values()) {&ltbr /&gt;            Matcher isThisPath = onePath.isThisPath(request.getMethod(), request.getPathInfo());&ltbr /&gt;            if (isThisPath != null &amp;&amp; isThisPath.matches()) {&ltbr /&gt;                return onePath.handler.getResponse(request, payLoad, extractParameters(isThisPath));&ltbr /&gt;            }&ltbr /&gt;        }&ltbr /&gt;        return new WebServerResponse(HttpServletResponse.SC_NOT_FOUND, &quot;This path is unknown&quot;);&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private static String[] extractParameters(Matcher thisPath) {&ltbr /&gt;        String[] params = new String[thisPath.groupCount()];&ltbr /&gt;        for (int groupIndex = 1; groupIndex &amp;lt;= thisPath.groupCount(); groupIndex++) {&ltbr /&gt;            params[groupIndex - 1] = thisPath.group(groupIndex);&ltbr /&gt;        }&ltbr /&gt;        return params;&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltp&gt;Maintenant que nous avons vu la tuyauterie, passons à l&apos;algo de Scalaskel en lui-même. Au niveau modèle, j&apos;ai deux classes, une représentant une solution (Change), et un enum représentant les pièces : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import com.fasterxml.jackson.annotation.JsonProperty;&ltbr /&gt;&ltbr /&gt;public class Change {&ltbr /&gt;    @JsonProperty&ltbr /&gt;    private Integer foo;&ltbr /&gt;    @JsonProperty&ltbr /&gt;    private Integer bar;&ltbr /&gt;    @JsonProperty&ltbr /&gt;    private Integer qix;&ltbr /&gt;    @JsonProperty&ltbr /&gt;    private Integer baz;&ltbr /&gt;&ltbr /&gt;    public Change(Change change) {&ltbr /&gt;        if (change != null) {&ltbr /&gt;            foo = change.foo;&ltbr /&gt;            bar = change.bar;&ltbr /&gt;            qix = change.qix;&ltbr /&gt;            baz = change.baz;&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public void pay(Coin coin) {&ltbr /&gt;        switch (coin) {&ltbr /&gt;            case FOO:&ltbr /&gt;                foo = foo == null ? 1 : foo + 1;&ltbr /&gt;                break;&ltbr /&gt;            case BAR:&ltbr /&gt;                bar = bar == null ? 1 : bar + 1;&ltbr /&gt;                break;&ltbr /&gt;            case QIX:&ltbr /&gt;                qix = qix == null ? 1 : qix + 1;&ltbr /&gt;                break;&ltbr /&gt;            case BAZ:&ltbr /&gt;                baz = baz == null ? 1 : baz + 1;&ltbr /&gt;                break;&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt; &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import java.util.List;&ltbr /&gt;&ltbr /&gt;import static com.google.common.collect.Lists.newArrayList;&ltbr /&gt;&ltbr /&gt;public enum Coin {&ltbr /&gt;    FOO(1),&ltbr /&gt;    BAR(7),&ltbr /&gt;    QIX(11),&ltbr /&gt;    BAZ(21);&ltbr /&gt;&ltbr /&gt;    private int value;&ltbr /&gt;&ltbr /&gt;    Coin(int value) {&ltbr /&gt;        this.value = value;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public int getValue() {&ltbr /&gt;        return value;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public boolean canPay(int cents) {&ltbr /&gt;        return cents &gt;= value;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private static class ListHolder {&ltbr /&gt;        private static final List&amp;lt;Coin&amp;gt; valuesAsLists = newArrayList(values());&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public static List&amp;lt;Coin&amp;gt; valuesAsLists() {&ltbr /&gt;        return ListHolder.valuesAsLists;&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;La classe Change contient des annotations pour la sérialisation Json avec Jackson, elle contient également un constructeur par copie servant dans l&apos;algo, ainsi qu&apos;une méthode pay, permettant d&apos;ajouter une pièce à une solution. Quand à la classe Coin, elle contient une méthode &quot;canPay&quot; permettant de savoir si on peut ajouter la pièce pour un nombre de cents restant. Les listes sont là pour pouvoir utiliser la méthode Collections2.filter de Guava. &lt/p&gt;&ltp&gt;Et pour finir, voici la classe principale : le service permettant de faire le calcul. &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import com.google.common.base.Predicate;&ltbr /&gt;import com.google.common.collect.Collections2;&ltbr /&gt;import com.google.common.collect.Lists;&ltbr /&gt;&ltbr /&gt;import java.util.List;&ltbr /&gt;&ltbr /&gt;public enum ScalaskelChangeService {&ltbr /&gt;    INSTANCE;&ltbr /&gt;&ltbr /&gt;    public static ScalaskelChangeService getInstance() {&ltbr /&gt;        return INSTANCE;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public List&amp;lt;Change&amp;gt; calculateChanges(int cents) {&ltbr /&gt;        return completeChanges(cents, null, null);&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private List&amp;lt;Change&amp;gt; completeChanges(int cents, Change currentChange, Coin lastCoin) {&ltbr /&gt;        // Stop condition of recursivity&ltbr /&gt;        if (cents == 0) {&ltbr /&gt;            return Lists.newArrayList(currentChange);&ltbr /&gt;        }&ltbr /&gt;        List&amp;lt;Change&amp;gt; changes = Lists.newArrayList();&ltbr /&gt;        for (Coin coin : Collections2.filter(&ltbr /&gt;                Coin.valuesAsLists(),&ltbr /&gt;                new FilterCoins(lastCoin, cents))) {&ltbr /&gt;            Change change = new Change(currentChange);&ltbr /&gt;            change.pay(coin);&ltbr /&gt;            changes.addAll(completeChanges(cents - coin.getValue(), change, coin));&ltbr /&gt;        }&ltbr /&gt;        return changes;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    /**&ltbr /&gt;     * Filter coins with this rule :&ltbr /&gt;     * coin is keeped only if :&ltbr /&gt;     * &amp;lt;ul&amp;gt;&ltbr /&gt;     * &amp;lt;li&amp;gt;its value is bigger or equals thant lastCoin&amp;lt;/li&amp;gt;&ltbr /&gt;     * &amp;lt;li&amp;gt;we can pay with the coin.&amp;lt;/li&amp;gt;&ltbr /&gt;     * &amp;lt;/ul&amp;gt;&ltbr /&gt;     */&ltbr /&gt;    private static class FilterCoins implements Predicate&ltCoin&gt; {&ltbr /&gt;&ltbr /&gt;        private int minValue;&ltbr /&gt;        private int centsToPay;&ltbr /&gt;&ltbr /&gt;        private FilterCoins(Coin lastCoin, int centsToPay) {&ltbr /&gt;            minValue = lastCoin == null ? 0 : lastCoin.getValue();&ltbr /&gt;            this.centsToPay = centsToPay;&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        @Override&ltbr /&gt;        public boolean apply(Coin input) {&ltbr /&gt;            return minValue &lt= input.getValue() &amp;&amp; input.canPay(centsToPay);&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Cette classe est un enum pour le côté singleton. La classe FilterCoins permet de filtrer les pièces utilisables en fonction de la dernière pièce utilisée ainsi que le nombre de cents restant à payer. Pour l&apos;algo, il s&apos;agit d&apos;un algo récursif relativement bourrin. Il est sûr que si les performances avaient été un critère, j&apos;aurais sûrement modifié l&apos;algo. J&apos;espère que mon code est suffisamment clair pour ne pas avoir à l&apos;expliquer d&apos;avantage. &lt/p&gt;&ltp&gt;La dernière partie que nous n&apos;avons pas vu est le &quot;PathHandler&quot; permettant de lier le service au WebServer : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import com.fasterxml.jackson.annotation.JsonInclude;&ltbr /&gt;import com.fasterxml.jackson.core.JsonProcessingException;&ltbr /&gt;import com.fasterxml.jackson.databind.ObjectMapper;&ltbr /&gt;import fr.ybonnel.codestory.WebServerResponse;&ltbr /&gt;import fr.ybonnel.codestory.path.scalaskel.Change;&ltbr /&gt;import fr.ybonnel.codestory.path.scalaskel.ScalaskelChangeService;&ltbr /&gt;&ltbr /&gt;import javax.servlet.http.HttpServletRequest;&ltbr /&gt;import javax.servlet.http.HttpServletResponse;&ltbr /&gt;import java.util.List;&ltbr /&gt;&ltbr /&gt;public class ChangeScalaskelHandler extends AbstractPathHandler {&ltbr /&gt;&ltbr /&gt;    private ObjectMapper objectMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL);&ltbr /&gt;&ltbr /&gt;    private boolean wrongParams(int centsToPay) {&ltbr /&gt;        return centsToPay &amp;lt;= 0 || centsToPay &amp;gt; 100;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Override&ltbr /&gt;    public WebServerResponse getResponse(HttpServletRequest request, String payLoad, String... params) throws JsonProcessingException {&ltbr /&gt;        int centsToPay = Integer.parseInt(params[0]);&ltbr /&gt;        if (wrongParams(centsToPay)) {&ltbr /&gt;            return new WebServerResponse(HttpServletResponse.SC_FORBIDDEN, &quot;Wrong parameters&quot;);&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        List&amp;lt;Change&amp;gt; changes = ScalaskelChangeService.getInstance().calculateChanges(centsToPay);&ltbr /&gt;        return new WebServerResponse(HttpServletResponse.SC_OK, objectMapper.writeValueAsString(changes));&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Dans cette classe, vous pouvez voir une petite protection afin d&apos;éviter de faire tomber le serveur en demandant le change de 1.000.000 de cents. On peut également y voir la sérialisation Json avec Jackson, mais rien de sorcier non plus. &lt/p&gt;&ltbr/&gt; &lth1&gt;La calculette&lt/h1&gt;&ltp&gt;Pour cet exercice, pas d&apos;énoncé, la première requête reçue fut : &quot;/?q=1+1&quot; à laquelle on se doute qu&apos;il faut répondre &quot;2&quot;. Je ne vais pas vous détailler toutes les étapes par lesquelles je suis passé pour arriver au bout. Voici la liste des requêtes reçues (dans l&apos;ordre) : &ltul&gt;&ltli&gt;1+1&lt/li&gt;&ltli&gt;2+2&lt/li&gt;&ltli&gt;3+3&lt/li&gt;&ltli&gt;4+4&lt/li&gt;&ltli&gt;5+5&lt/li&gt;&ltli&gt;6+6&lt/li&gt;&ltli&gt;7+7&lt/li&gt;&ltli&gt;8+8&lt/li&gt;&ltli&gt;9+9&lt/li&gt;&ltli&gt;1*1&lt/li&gt;&ltli&gt;2*2&lt/li&gt;&ltli&gt;3*3&lt/li&gt;&ltli&gt;4*4&lt/li&gt;&ltli&gt;5*5&lt/li&gt;&ltli&gt;6*6&lt/li&gt;&ltli&gt;7*7&lt/li&gt;&ltli&gt;8*8&lt/li&gt;&ltli&gt;9*9&lt/li&gt;&ltli&gt;1+2*2&lt/li&gt;&ltli&gt;(1+2)*2&lt/li&gt;&ltli&gt;(1+2+3+4+5+6+7+8+9+10)*2&lt/li&gt;&ltli&gt;(1+2)/2&lt/li&gt;&ltli&gt;((1+2)+3+4+(5+6+7)+(8+9+10)*3)/2*5&lt/li&gt;&ltli&gt;1,5*4&lt/li&gt;&ltli&gt;((1,1+2)+3,14+4+(5+6+7)+(8+9+10)*4267387833344334647677634)/2*553344300034334349999000&lt/li&gt;&ltli&gt;((1,1+2)+3,14+4+(5+6+7)+(8+9+10)*4267387833344334647677634)/2*553344300034334349999000/31878018903828899277492024491376690701584023926880&lt/li&gt;&ltli&gt;(-1)+(1)&lt/li&gt;&ltli&gt;1,0000000000000000000000000000000000000000000000001*1,0000000000000000000000000000000000000000000000001&lt/li&gt;&lt/ul&gt;Cette liste vous permet sans doute de voir par quelles étapes je suis passé : &ltul&gt;&ltli&gt;Gestion des sommes&lt/li&gt;&ltli&gt;Gestion des multiplication&lt/li&gt;&ltli&gt;Gestion des priorités&lt/li&gt;&ltli&gt;Gestion des parenthèses&lt/li&gt;&ltli&gt;Gestion des divisions&lt/li&gt;&ltli&gt;Gestion des décimaux&lt/li&gt;&ltli&gt;Gestion des grands nombres&lt/li&gt;&ltli&gt;Gestion des nombres négatifs&lt/li&gt;&ltli&gt;Gestion des nombres de décimales élevés&lt/li&gt;&lt/ul&gt;Pour la première version de mon code, j&apos;ai tout fait à la main à grand coup de Pattern, voici le résultat final : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import com.google.common.base.Throwables;&ltbr /&gt;import fr.ybonnel.codestory.query.calculate.Operator;&ltbr /&gt;import fr.ybonnel.codestory.query.calculate.SearchParanthesis;&ltbr /&gt;&ltbr /&gt;import java.math.BigDecimal;&ltbr /&gt;import java.math.RoundingMode;&ltbr /&gt;import java.text.DecimalFormat;&ltbr /&gt;import java.text.DecimalFormatSymbols;&ltbr /&gt;import java.text.NumberFormat;&ltbr /&gt;import java.text.ParseException;&ltbr /&gt;import java.util.ArrayList;&ltbr /&gt;import java.util.List;&ltbr /&gt;import java.util.Locale;&ltbr /&gt;import java.util.regex.Matcher;&ltbr /&gt;import java.util.regex.Pattern;&ltbr /&gt;&ltbr /&gt;public class CalculateQueryHandler extends AbstractQueryHandler {&ltbr /&gt;&ltbr /&gt;    private static final String NOMBRE = &quot;\\-?\\d+\\.?\\d*&quot;;&ltbr /&gt;    private static final String PATTERN_DIVIDE = &quot;(&quot; + NOMBRE + &quot;)/(&quot; + NOMBRE + &quot;)&quot;;&ltbr /&gt;    private static final String PATTERN_MULTIPLY = &quot;(&quot; + NOMBRE + &quot;)\\*(&quot; + NOMBRE + &quot;)&quot;;&ltbr /&gt;    private static final String PATTERN_ADD = &quot;(&quot; + NOMBRE + &quot;)\\+(&quot; + NOMBRE + &quot;)&quot;;&ltbr /&gt;&ltbr /&gt;    // operators list by priority.&ltbr /&gt;    private List&ltOperator&gt; operators = new ArrayList&ltOperator&gt;() {{&ltbr /&gt;        // operator divide.&ltbr /&gt;        add(new Operator(PATTERN_DIVIDE) {&ltbr /&gt;            @Override&ltbr /&gt;            public BigDecimal operate(BigDecimal a, BigDecimal b) {&ltbr /&gt;                try {&ltbr /&gt;                    return a.divide(b);&ltbr /&gt;                } catch (ArithmeticException exception) {&ltbr /&gt;                    return a.divide(b, 1000, RoundingMode.HALF_UP);&ltbr /&gt;                }&ltbr /&gt;            }&ltbr /&gt;        });&ltbr /&gt;        // Operator Multiply.&ltbr /&gt;        add(new Operator(PATTERN_MULTIPLY) {&ltbr /&gt;            @Override&ltbr /&gt;            public BigDecimal operate(BigDecimal a, BigDecimal b) {&ltbr /&gt;                return a.multiply(b);&ltbr /&gt;            }&ltbr /&gt;        });&ltbr /&gt;        // Operator Add.&ltbr /&gt;        add(new Operator(PATTERN_ADD) {&ltbr /&gt;            @Override&ltbr /&gt;            public BigDecimal operate(BigDecimal a, BigDecimal b) {&ltbr /&gt;                return a.add(b);&ltbr /&gt;            }&ltbr /&gt;        });&ltbr /&gt;    }};&ltbr /&gt;&ltbr /&gt;    private Pattern patternParenthesis = Pattern.compile(&quot;\\((.*)\\)&quot;);&ltbr /&gt;    private NumberFormat format = new DecimalFormat(&quot;#0.#&quot;, new DecimalFormatSymbols(Locale.FRANCE));&ltbr /&gt;&ltbr /&gt;    public CalculateQueryHandler() {&ltbr /&gt;        format.setMaximumFractionDigits(500);&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Override&ltbr /&gt;    public String getResponse(String query) {&ltbr /&gt;        String result = null;&ltbr /&gt;        try {&ltbr /&gt;            result = calculateWithParenthesis(query.replace(&apos; &apos;, &apos;+&apos;).replace(&apos;,&apos;, &apos;.&apos;));&ltbr /&gt;        } catch (ParseException e) {&ltbr /&gt;            Throwables.propagate(e);&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        try {&ltbr /&gt;            BigDecimal retour = new BigDecimal(result);&ltbr /&gt;            return format.format(retour);&ltbr /&gt;        } catch (NumberFormatException numberFormatException) {&ltbr /&gt;            numberFormatException.printStackTrace();&ltbr /&gt;            return null;&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private String calculateWithParenthesis(String calculateQuery) throws ParseException {&ltbr /&gt;        Matcher matcherParenthsis = patternParenthesis.matcher(calculateQuery);&ltbr /&gt;&ltbr /&gt;        while (matcherParenthsis.find()) {&ltbr /&gt;            SearchParanthesis searchParanthesis = new SearchParanthesis(calculateQuery).invoke();&ltbr /&gt;            int start = searchParanthesis.getStart();&ltbr /&gt;            int end = searchParanthesis.getEnd();&ltbr /&gt;&ltbr /&gt;            // Calculate the content of parenthesis.&ltbr /&gt;            String queryBetweenParenthesis = calculateQuery.substring(start + 1, end - 1);&ltbr /&gt;            String result = calculateWithoutParenthesis(queryBetweenParenthesis);&ltbr /&gt;&ltbr /&gt;            // Replace the parenthesis group with result.&ltbr /&gt;            calculateQuery = calculateQuery.substring(0, start) + result + calculateQuery.substring(end);&ltbr /&gt;            matcherParenthsis = patternParenthesis.matcher(calculateQuery);&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        calculateQuery = calculateWithoutParenthesis(calculateQuery);&ltbr /&gt;        return calculateQuery;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private String calculateWithoutParenthesis(String calculateQuery) throws ParseException {&ltbr /&gt;&ltbr /&gt;        for (Operator operator : operators) {&ltbr /&gt;            Matcher matcher = operator.matcher(calculateQuery);&ltbr /&gt;&ltbr /&gt;            while (matcher.find()) {&ltbr /&gt;                BigDecimal a = new BigDecimal(matcher.group(1));&ltbr /&gt;                BigDecimal b = new BigDecimal(matcher.group(2));&ltbr /&gt;                BigDecimal result = operator.operate(a, b);&ltbr /&gt;&ltbr /&gt;                // Replace sur operation in string by result.&ltbr /&gt;                calculateQuery = calculateQuery.substring(0, matcher.start()) + result.toString() + calculateQuery.substring(matcher.end());&ltbr /&gt;&ltbr /&gt;                matcher = operator.matcher(calculateQuery);&ltbr /&gt;            }&ltbr /&gt;        }&ltbr /&gt;&ltbr /&gt;        return calculateQuery;&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Je vous l&apos;accorde, le code est relativement complexe, mais je suis assez fier d&apos;avoir pondu une calculette à la main. &lt/p&gt;&ltp&gt;Devant tout ce code, j&apos;ai décidé de simplifier tout ça grâce à groovy, vous allez voir le code est grandement simplifié : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import groovy.lang.GroovyShell;&ltbr /&gt;import java.text.DecimalFormat;&ltbr /&gt;import java.text.DecimalFormatSymbols;&ltbr /&gt;import java.text.NumberFormat;&ltbr /&gt;import java.util.Locale;&ltbr /&gt;&ltbr /&gt;public class CalculateQueryHandler extends AbstractQueryHandler {&ltbr /&gt;    private NumberFormat format = new DecimalFormat(&quot;#0.#&quot;, new DecimalFormatSymbols(Locale.FRANCE));&ltbr /&gt;    private GroovyShell shell = new GroovyShell();&ltbr /&gt;&ltbr /&gt;    public CalculateQueryHandler() {&ltbr /&gt;        format.setMaximumFractionDigits(500);&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Override&ltbr /&gt;    public String getResponse(String query) {&ltbr /&gt;        Object object = shell.evaluate(&quot;return &quot; + query.replace(&apos; &apos;, &apos;+&apos;).replace(&apos;,&apos;, &apos;.&apos;));&ltbr /&gt;        return formatGroovyReturn(object);&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private String formatGroovyReturn(Object object) {&ltbr /&gt;        try {&ltbr /&gt;            return format.format(object);&ltbr /&gt;        } catch (NumberFormatException numberFormatException) {&ltbr /&gt;            numberFormatException.printStackTrace();&ltbr /&gt;            return null;&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Et voilà, merci groovy, finalement pas besoin de réinventer la roue... &lt/p&gt;&ltbr/&gt;&ltbr/&gt;&ltbr/&gt;&ltp&gt;Cet article est le deuxième d&apos;une série de trois articles dont le dernier est sans doute le plus intéressant : &lta href=&quot;http://www.ybonnel.fr/2013/02/code-story-en-java-jajascript-et-les.html&quot;&gt;Jajascript et les performance&lt/a&gt;. Afin de vous donner un avant-goût, vous pouvez regarder l&apos;article sur le blog Code Story : &lta href=&quot;http://code-story.net/2013/02/02/jajascript.html&quot;&gt;Location d’astronef sur Jajascript&lt/a&gt;. &lt/p&gt;  

          </description>
      </item>
      
      <item>
          <title>Ma participation à CodeStory en java : Intro</title>
          <link>http://www.ybonnel.fr/2013/02/ma-participation-codestory-en-java-intro.html</link>
          <pubDate>Sun, 3 Feb 2013 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2013/02/ma-participation-codestory-en-java-intro.html</guid>
          <description>
              &ltp&gt;La première étape du concours &lta href=&quot;http://www.code-story.net/&quot;&gt;Code Story&lt/a&gt; vient de se terminer, je vais donc tenter de faire un résumé de ma participation à ce concours. Pour les curieux, le classement est disponible &lta href=&quot;https://www.blogger.com/status.code-story.net&quot;&gt;ici&lt/a&gt;.&ltbr /&gt;Etant sans doute un peu malade, j&apos;ai participé à ce concours 3 fois : en Java, en Ceylon et en Scala. Mon inscription principale avec le code le plus soigné et complet reste celle en Java. Je vais donc dans un premier temps vous faire un retour sur la partie Java. L&apos;ensemble du code source de ma participation en java est disponible sur &lta href=&quot;https://github.com/ybonnel/CodeStory&quot;&gt;github&lt/a&gt;&ltbr /&gt;Les étapes de l&apos;application étant nombreuses, je vais découper ça en plusieurs articles  : &ltul&gt;&ltli&gt;Serveur Http et TDD (déjà présenté dans l&apos;article suivant : &lta href=&quot;http://www.ybonnel.fr/2013/01/marre-du-cloud-et-du-jee-vive-lauto.html&quot;&gt;Marre du cloud et du JEE -&amp;gt; vive l&apos;auto-hébergement et les main.&lt/a&gt;)&lt/li&gt;&ltli&gt;Les logs et répondre à des questions fixes (dans le présent article)&lt/li&gt;&ltli&gt;&lta href=&quot;http://www.ybonnel.fr/2013/02/codestory-en-java-scalaskel-et-la.html&quot;&gt;Scalaskel et la calculette&lt/a&gt;&lt/li&gt;&ltli&gt;&lta href=&quot;http://www.ybonnel.fr/2013/02/code-story-en-java-jajascript-et-les.html&quot;&gt;Jajascript et les performances&lt/a&gt;&lt/li&gt;&lt/ul&gt;&lt/p&gt; &lth1&gt;Principes du concours&lt/h1&gt;&ltp&gt;Afin de comprendre les choix que j&apos;ai faits au niveau du code, il est important de connaître les principes de ce concours. Au départ, on s&apos;inscrit en donnant juste une URL publique (ex : http://serveur.mondomain.fr:8080). Le seul truc que l&apos;on sait avant de commencer, c&apos;est qu&apos;on va recevoir une requête GET sur http://serveur.mondomain.fr:8080/?q=Quelle+est+ton+adresse+email à laquelle il faut répondre avec l&apos;adresse email, pour les curieux, le règlement est disponible &lta href=&quot;http://code-story.net/2013/01/04/concours-2013.html&quot;&gt;ici&lt/a&gt;. On se doute également dès le départ qu&apos;on recevra d&apos;autres requêtes HTTP auxquelles il faudra répondre (d&apos;où le besoin de logs).&lt/p&gt;&ltbr/&gt; &lth1&gt;Répondre à des questions fixes&lt/h1&gt;&ltp&gt;Les premières requêtes n&apos;étaient pas très compliquées, il s&apos;agissait simplement de questions avec une réponse fixe attendue. Pour information, voici la liste des questions reçues : &ltul&gt;&ltli&gt;?q=Quelle est ton adresse email&lt/li&gt;&ltli&gt;?q=Es tu abonne a la mailing list(OUI/NON)&lt/li&gt;&ltli&gt;?q=Es tu heureux de participer(OUI/NON)&lt/li&gt;&ltli&gt;?q=Es tu pret a recevoir une enonce au format markdown par http post(OUI/NON)&lt/li&gt;&ltli&gt;?q=Est ce que tu reponds toujours oui(OUI/NON)&lt/li&gt;&ltli&gt;?q=As tu bien recu le premier enonce(OUI/NON)&lt/li&gt;&ltli&gt;?q=As tu bien recu le second enonce(OUI/NON)&lt/li&gt;&ltli&gt;?q=As tu passe une bonne nuit malgre les bugs de l etape precedente(PAS_TOP/BOF/QUELS_BUGS)&lt/li&gt;&ltli&gt;?q=As tu copie le code de ndeloof(OUI/NON/JE_SUIS_NICOLAS)&lt/li&gt;&ltli&gt;?q=Souhaites-tu-participer-a-la-suite-de-Code-Story(OUI/NON)&lt/li&gt;&lt/ul&gt;Afin de pouvoir rapidement faire évoluer l&apos;application pour ajouter la gestion de futures questions, voici comment j&apos;ai développé.&lt/p&gt;&ltp&gt;Première étape le test JUnit (et oui j&apos;ai fait du TDD), voici donc l&apos;exemple du test pour la troisième question : &ltpre class=&quot;brush:java&quot;&gt;@Test&ltbr /&gt;public void should_answer_to_participate() throws Exception {&ltbr /&gt;    WebConversation wc = new WebConversation();&ltbr /&gt;    WebResponse response = wc.getResponse(getURL() + &quot;/?q=Es tu heureux de participer(OUI/NON)&quot;);&ltbr /&gt;    assertEquals(200, response.getResponseCode());&ltbr /&gt;    assertEquals(&quot;Response must be &apos;OUI&apos;&quot;, &quot;OUI&quot;, response.getText());&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Le test est donc très simple, rapide à écrire, et se met à la place du robot pour effectuer le test (la librairie utilisée est HttpUnit).&lt/p&gt;&ltp&gt;Voyons maintenant comment j&apos;ai codé le serveur. A travers les premières questions, on se rend compte qu&apos;une partie des requêtes reçues va l&apos;être avec le paramètre &quot;q&quot;, j&apos;ai donc décidé de créer la notion de QueryHandler chargée de répondre aux requêtes reçues avec ce paramètre. Voici la classe abstraite associée : &ltpre class=&quot;brush:java&quot;&gt;public abstract class AbstractQueryHandler {&ltbr /&gt;    public abstract String getResponse(String query);&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltp&gt;La tuyauterie pour appeler le handler (et le bon) et relativement simple. Côté handler HTTP, c&apos;est juste la récupération du paramètre et l&apos;appel d&apos;une méthode de la classe chargée d&apos;appeler le bon QueryHandler : &ltpre class=&quot;brush:java&quot;&gt;String query = request.getParameter(QUERY_PARAMETER);&ltbr /&gt;if (query != null) {&ltbr /&gt;    response = QueryType.getResponse(query);&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;La variable &quot;response&quot; contient le texte à renvoyer, mais également le status HTTP à utiliser. La classe &quot;QueryType&quot; est en fait un &quot;enum&quot;, prenant en paramètre de constructeur le handler à utiliser, et ayant une méthode abstraite &quot;isThisQueryType&quot; prenant en paramètre la &quot;query&quot; et renvoyant un boolean permettant de savoir si c&apos;est lui qui est responsable de cette &quot;query&quot;. Et pour finir, cet enum contient une méthode statique chargée d&apos;appeler le bon QueryHandler en fonction de la query. Voici la classe avec l&apos;exemple de question vu plus haut : &ltpre class=&quot;brush:java&quot;&gt;import fr.ybonnel.codestory.WebServerResponse;&ltbr /&gt;import javax.servlet.http.HttpServletResponse;&ltbr /&gt;&ltbr /&gt;public enum QueryType {&ltbr /&gt;&ltbr /&gt;    PARTICIAPATE(new FixResponseQueryHandler(&quot;OUI&quot;)) {&ltbr /&gt;        @Override protected boolean isThisQueryType(String query) {&ltbr /&gt;            return query.equals(&quot;Es tu heureux de participer(OUI/NON)&quot;);&ltbr /&gt;        }&ltbr /&gt;    };&ltbr /&gt;&ltbr /&gt;    private AbstractQueryHandler queryHandler;&ltbr /&gt;&ltbr /&gt;    QueryType(AbstractQueryHandler queryHandler) {&ltbr /&gt;        this.queryHandler = queryHandler;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    protected abstract boolean isThisQueryType(String query);&ltbr /&gt;&ltbr /&gt;    public static WebServerResponse getResponse(String query) {&ltbr /&gt;        for (QueryType oneQuestion : values()) {&ltbr /&gt;            if (oneQuestion.isThisQueryType(query)) {&ltbr /&gt;                return new WebServerResponse(HttpServletResponse.SC_OK, oneQuestion.queryHandler.getResponse(query));&ltbr /&gt;            }&ltbr /&gt;        }&ltbr /&gt;        return new WebServerResponse(HttpServletResponse.SC_NOT_FOUND, &quot;Query &quot; + query + &quot; is unknown&quot;);&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Vous pouvez donc voir dans cette enum l&apos;apparition de la classe FixResponseQueryHandler, cette classe est très simple, son rôle est simplement de renvoyer une réponse fixe, la voici : &ltpre class=&quot;brush:java&quot;&gt;public class FixResponseQueryHandler extends AbstractQueryHandler {&ltbr /&gt;&ltbr /&gt;    private String response;&ltbr /&gt;    public FixResponseQueryHandler(String response) {&ltbr /&gt;        this.response = response;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Override public String getResponse(String query) {&ltbr /&gt;        return response;&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltp&gt;Voici donc tous les éléments que j&apos;ai mis en place pour les questions avec réponses fixes. A posteriori, on aurait pu mettre en place une simple Map (c&apos;est ce que j&apos;ai fait en Ceylon et en Scala), mais c&apos;est le problème de coder au fur et à mesure que les questions arrivent, on ne sait pas trop ce qui va arriver ensuite... J&apos;aurais évidement pu refactorer tout ça (les tests unitaires me permettant d&apos;être sûr de ne pas tout casser), mais j&apos;ai eu la flemme, d&apos;autant que ce n&apos;est pas la partie la plus intéressante, les énoncés suivants étant bien plus sympas. &lt/p&gt;&ltbr/&gt; &lth1&gt;Les logs&lt/h1&gt;&ltp&gt;Un élément important de ce concours, c&apos;est que nous ne recevions aucune consigne par mail, twitter ou pigeon voyageur. Le seul mode d&apos;interaction était l&apos;envoi d&apos;une requête HTTP par le robot qui renvoyait la requête tant qu&apos;on ne répondait pas correctement. Afin de pouvoir être réactif aux nouvelles requêtes en toute circonstance, je me suis ajouté un système de logs en base de donnée avec possibilité de les récupérer par un appel http (ce qui me permettait de la faire même depuis mon téléphone). Je ne vais pas vous détailler comment j&apos;ai mis en place ce système, mais plutôt comment j&apos;ai mis en place la BDD tout en gardant un système simple et rapide à tester. &lt/p&gt; &lth2&gt;Mise en place de la BDD&lt/h2&gt;&ltp&gt;Comme vous le savez, je n&apos;ai pas de stack compliquée pour cette application, pour mettre en place une BDD simple, je suis parti sur un h2 embarqué. Première étape ajout de la dépendance au pom.xml : &ltpre class=&quot;bursh:xml&quot;&gt;&ltbr /&gt;&amp;lt;dependency&amp;gt;&ltbr /&gt;    &amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt;&ltbr /&gt;    &amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt;&ltbr /&gt;    &amp;lt;version&amp;gt;1.3.170&amp;lt;/version&amp;gt;&ltbr /&gt;&amp;lt;/dependency&amp;gt;&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltp&gt;Sur l&apos;utilisation de celle-ci, rien d&apos;extra-ordinaire, je suis parti sur du jdbc à la main. Ça peux paraître archaïque, mais pour gérer 2 pauvres tables (une pour les logs et une pour les énoncés), pas besoin de sortir l&apos;artillerie lourde. Pour les curieux, voici la classe centrale pour gérer la base : &ltpre class=&quot;brush:java&quot;&gt;&ltbr /&gt;import com.google.common.base.Throwables;&ltbr /&gt;import org.h2.jdbcx.JdbcDataSource;&ltbr /&gt;&ltbr /&gt;import java.sql.Connection;&ltbr /&gt;import java.sql.DriverManager;&ltbr /&gt;import java.sql.SQLException;&ltbr /&gt;import java.sql.Statement;&ltbr /&gt;&ltbr /&gt;public enum DatabaseManager {&ltbr /&gt;&ltbr /&gt;    INSTANCE;&ltbr /&gt;&ltbr /&gt;    public static final String TYPE_Q = &quot;Q&quot;;&ltbr /&gt;    public static final String DB_DRIVER = &quot;org.h2.Driver&quot;;&ltbr /&gt;    public static final String DB_USER = &quot;sa&quot;;&ltbr /&gt;&ltbr /&gt;    private JdbcDataSource ds;&ltbr /&gt;&ltbr /&gt;    DatabaseManager() {&ltbr /&gt;        try {&ltbr /&gt;            Class.forName(DB_DRIVER);&ltbr /&gt;&ltbr /&gt;            boolean databaseExists = doesDatabaseExists();&ltbr /&gt;&ltbr /&gt;            ds = new JdbcDataSource();&ltbr /&gt;            ds.setURL(DatabaseUtil.getUrl());&ltbr /&gt;            ds.setUser(DB_USER);&ltbr /&gt;            ds.setPassword(DB_USER);&ltbr /&gt;&ltbr /&gt;            if (!databaseExists) {&ltbr /&gt;                createDatabase();&ltbr /&gt;            }&ltbr /&gt;        } catch (Exception exception) {&ltbr /&gt;            Throwables.propagate(exception);&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private static boolean doesDatabaseExists() {&ltbr /&gt;        boolean databaseExists = false;&ltbr /&gt;        try {&ltbr /&gt;            String url = DatabaseUtil.getUrl() + &quot;;IFEXISTS=TRUE&quot;;&ltbr /&gt;            Connection connection = DriverManager.getConnection(url, DB_USER, DB_USER);&ltbr /&gt;            connection.close();&ltbr /&gt;            databaseExists = true;&ltbr /&gt;        } catch (SQLException ignore) {&ltbr /&gt;        }&ltbr /&gt;        return databaseExists;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public void createDatabase() throws SQLException {&ltbr /&gt;        Connection conn = ds.getConnection();&ltbr /&gt;&ltbr /&gt;        Statement statementDrop = conn.createStatement();&ltbr /&gt;        statementDrop.executeUpdate(&quot;DROP TABLE IF EXISTS LOG&quot;);&ltbr /&gt;&ltbr /&gt;        Statement statement = conn.createStatement();&ltbr /&gt;        statement.executeUpdate(&quot;CREATE TABLE LOG (&quot; +&ltbr /&gt;                &quot;HEURE TIMESTAMP,&quot; +&ltbr /&gt;                &quot;TYPE_LOG VARCHAR(10),&quot; +&ltbr /&gt;                &quot;MESSAGE VARCHAR(500))&quot;);&ltbr /&gt;&ltbr /&gt;        statementDrop = conn.createStatement();&ltbr /&gt;        statementDrop.executeUpdate(&quot;DROP TABLE IF EXISTS ENONCE&quot;);&ltbr /&gt;&ltbr /&gt;        statement = conn.createStatement();&ltbr /&gt;        statement.executeUpdate(&quot;CREATE TABLE ENONCE (&quot; +&ltbr /&gt;                &quot;ID INTEGER,&quot; +&ltbr /&gt;                &quot;TITLE VARCHAR(100),&quot; +&ltbr /&gt;                &quot;ENONCE VARCHAR(4000))&quot;);&ltbr /&gt;&ltbr /&gt;        conn.close();&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private LogDao logDao;&ltbr /&gt;&ltbr /&gt;    public LogDao getLogDao() {&ltbr /&gt;        if (logDao == null) {&ltbr /&gt;            logDao = new LogDao(ds);&ltbr /&gt;        }&ltbr /&gt;        return logDao;&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private EnonceDao enonceDao;&ltbr /&gt;&ltbr /&gt;    public EnonceDao getEnonceDao() {&ltbr /&gt;        if (enonceDao == null) {&ltbr /&gt;            enonceDao = new EnonceDao(ds);&ltbr /&gt;        }&ltbr /&gt;        return enonceDao;&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltp&gt;Le but était de vous montrer que pour faire des trucs simples, il n&apos;est pas toujours utile de sortir l&apos;artillerie lourde avec du JPA ou autre... &lt/p&gt; &lth2&gt;Et pour les tests unitaires?&lt/h2&gt;&ltp&gt;Comme vous avez pu voir, les tests unitaires ne sont pas vraiment unitaire puisqu&apos;ils testent l&apos;application de bout en bout. Se pose du coup la question de la base de donnée qui ralentie les tests de manière inutile, heureusement h2 possède un mode mémoire qui rend la base très rapide et non persistante après les tests (ce qui permet de repartir à zéro à chaque fois). Pour passer d&apos;un mode à l&apos;autre, rien de sorcier : &ltpre class=&quot;brush:java&quot;&gt;public static String getUrl() {&ltbr /&gt;    if (test) {&ltbr /&gt;        return &quot;jdbc:h2:mem:codestory;DB_CLOSE_DELAY=-1&quot;;&ltbr /&gt;    }&ltbr /&gt;    return &quot;jdbc:h2:./codestory&quot;;&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Il ne faut pas oublier le &quot;DB_CLOSE_DELAY=-1&quot; qui permet de garder la base soit active tant que la jvm existe (ça évite d&apos;avoir des problèmes de structures qui disparaissent d&apos;un test à l&apos;autre).&lt/p&gt;&ltbr /&gt;&ltbr /&gt;&ltbr /&gt;&ltp&gt;À bientôt pour Scalaskel et la Calculette, puis pour le plus interessant : Jajascript et les performances.&lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>Marre du cloud et du JEE -> vive l'auto-hébergement et les main.</title>
          <link>http://www.ybonnel.fr/2013/01/marre-du-cloud-et-du-jee-vive-lauto.html</link>
          <pubDate>Tue, 8 Jan 2013 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2013/01/marre-du-cloud-et-du-jee-vive-lauto.html</guid>
          <description>
               &ltp&gt;Récemment l&apos;équipe CodeStory a lancé le concours pour la sélection 2013, informations &lta href=&quot;http://code-story.net/2013/01/04/concours-2013.html&quot;&gt;ici&lt/a&gt;. &lt/p&gt; &ltp&gt;Pour participer, il faut un serveur public qui répond à des requêtes HTTPs. Pour la première étape, il faut que le serveur réponde à la requête GET &quot;http://foobar.com:9090/?q=Quelle+est+ton+adresse+email&quot; avec votre adresse email.&ltbr/&gt;Rien de bien compliqué (en tout cas pour le moment), mais il faut évidement que votre serveur puisse évoluer pour répondre aux prochaines questions. &lt/p&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;Architecture technique&lt/h1&gt; &ltp&gt;Pour répondre au besoin de CodeStory, il y a plusieurs solutions (en restant dans l&apos;univers java) : &ltul&gt;&ltli&gt;Du JEE (ou conteneur de servlet simple) hébergé chez cloudbees ou à la maison. &lt/li&gt;&ltli&gt;Du play hébergé chez heroku, cloudbees ou à la maison. &lt/li&gt;&ltli&gt;Du Google App Engine. &lt/li&gt;&ltli&gt;Ou beaucoup plus simple :) &lt/il&gt;&lt/ul&gt;Dans le cadre de CodeStory, j&apos;ai décidé de partir sur le beaucoup plus simple (assez largement inspiré par une présentation que David Gageot avait faîte au BreizhJUG en 2011, disponible sur &lta href=&quot;http://www.parleys.com/#st=5&amp;id=2959&quot;&gt;parleys&lt/a&gt;). Je suis donc parti sur un jetty embarqué et démarré depuis un simple main. &lt/p&gt; &ltp&gt;Pour mettre en place cette &quot;architecture&quot;, deux étapes très compliquées : &ltul&gt;&ltli&gt;Le pom.xml&lt/li&gt;&ltli&gt;La classe main&lt/li&gt;&lt/ul&gt;&lt/p&gt;&ltbr/&gt; &lth2&gt;Le pom.xml&lt/h2&gt;&ltp&gt;Il faut juste ajouter la dépendance vers Jetty : &ltpre class=&quot;brush: xml&quot;&gt;&ltbr /&gt;&amp;lt;dependency&amp;gt;&ltbr /&gt;    &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;&ltbr /&gt;    &amp;lt;artifactId&amp;gt;jetty&amp;lt;/artifactId&amp;gt;&ltbr /&gt;    &amp;lt;version&amp;gt;6.1.25&amp;lt;/version&amp;gt;&ltbr /&gt;&amp;lt;/dependency&amp;gt;&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltbr/&gt; &lth2&gt;La classe main&lt/h2&gt;&ltp&gt;Le boulot de la classe main est simplement de démarrer le serveur et traiter les requêtes HTTP : &ltpre class=&quot;brush: java&quot;&gt;&ltbr /&gt;package fr.ybonnel.codestory;&ltbr /&gt;&ltbr /&gt;import org.mortbay.jetty.Server;&ltbr /&gt;import org.mortbay.jetty.handler.AbstractHandler;&ltbr /&gt;&ltbr /&gt;import javax.servlet.ServletException;&ltbr /&gt;import javax.servlet.http.HttpServletRequest;&ltbr /&gt;import javax.servlet.http.HttpServletResponse;&ltbr /&gt;import java.io.IOException;&ltbr /&gt;&ltbr /&gt;public class WebServer extends AbstractHandler {&ltbr /&gt;&ltbr /&gt;    public static final String QUERY_PARAMETER = &quot;q&quot;;&ltbr /&gt;&ltbr /&gt;    @Override&ltbr /&gt;    public void handle(String target, &ltbr /&gt;                       HttpServletRequest request, &ltbr /&gt;                       HttpServletResponse httpResponse, &ltbr /&gt;                       int dispatch)&ltbr /&gt;            throws IOException, ServletException {&ltbr /&gt;        // Traitement de la requète.&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    public static void main(String[] args) throws Exception {&ltbr /&gt;        int port = 10080;&ltbr /&gt;        if (args.length == 1) {&ltbr /&gt;            port = Integer.parseInt(args[0]);&ltbr /&gt;        }&ltbr /&gt;        Server server = new Server(port);&ltbr /&gt;        server.setHandler(new WebServer());&ltbr /&gt;        server.start();&ltbr /&gt;        server.join();&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltbr/&gt; &lth2&gt;Les intérêts&lt/h2&gt;&ltp&gt;L&apos;intérêt d&apos;une telle &quot;architecture&quot; est la simplicité, ce qui se traduit par trois avantages : &ltul&gt;&ltli&gt;Rapidité de démarrage : 38ms sur mon poste qui n&apos;est pas un fourdre de guerre.&lt/li&gt;&ltli&gt;Tests unitaires sans mock : grâce à la rapidité de démarrage, on peux faire des tests qui démarrent le serveur, exécutent une requête GET, et arrêtent le serveur. On se place donc à la place du client, ce qui est sans doute une garantie d&apos;avoir le résultat attendu.&lt/li&gt;&ltli&gt;Facilité d&apos;installation : juste un jar à exécuter (donc très simple que ce soit dans l&apos;IDE ou dans sur un serveur).&lt/li&gt;&lt/ul&gt;  &lt/p&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;Tests unitaires&lt/h1&gt;&ltp&gt;Comme on l&apos;a vu, pour les tests unitaires, rien de bien sorcier : &ltul&gt;&ltli&gt;On démarre le serveur (dans une méthode @Before, pour qu&apos;elle soit exécutée avant chaque test)&lt/li&gt;&ltli&gt;On fait le test (envoi d&apos;une requête GET, et vérifications sur la réponse).&lt/li&gt;&ltli&gt;On arrête le serveur (dans une méthode @After).&lt/li&gt;&lt/ul&gt;&lt/p&gt;&ltp&gt;Code complet du test de la première étape : &ltpre class=&quot;brush: java&quot;&gt;&ltbr /&gt;package fr.ybonnel.codestory;&ltbr /&gt;&ltbr /&gt;import com.google.api.client.http.*;&ltbr /&gt;import com.google.api.client.http.javanet.NetHttpTransport;&ltbr /&gt;import org.junit.After;&ltbr /&gt;import org.junit.Before;&ltbr /&gt;import org.junit.Test;&ltbr /&gt;import org.mortbay.jetty.Server;&ltbr /&gt;&ltbr /&gt;import java.io.BufferedReader;&ltbr /&gt;import java.io.IOException;&ltbr /&gt;import java.io.InputStreamReader;&ltbr /&gt;&ltbr /&gt;import static junit.framework.Assert.assertEquals;&ltbr /&gt;&ltbr /&gt;public class WebServerTest {&ltbr /&gt;&ltbr /&gt;    public static final int PORT = 18080;&ltbr /&gt;    private Server server;&ltbr /&gt;&ltbr /&gt;    @Before&ltbr /&gt;    public void setup() throws Exception {&ltbr /&gt;        WebServer.setTest(true);&ltbr /&gt;        server = new Server(PORT);&ltbr /&gt;        server.setHandler(new WebServer());&ltbr /&gt;        server.start();&ltbr /&gt;&ltbr /&gt;        new Thread(){&ltbr /&gt;            @Override&ltbr /&gt;            public void run() {&ltbr /&gt;                try {&ltbr /&gt;                    server.join();&ltbr /&gt;                } catch (InterruptedException ignore) {&ltbr /&gt;                }&ltbr /&gt;            }&ltbr /&gt;        }.start();&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @After&ltbr /&gt;    public void teardown() throws Exception {&ltbr /&gt;        server.stop();&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    @Test&ltbr /&gt;    public void should_answear_to_whatsyourmail() throws Exception {&ltbr /&gt;        String url = &quot;http://localhost:&quot; + PORT + &quot;/?q=Quelle+est+ton+adresse+email&quot;;&ltbr /&gt;        HttpResponse response = sendGetRequest(url);&ltbr /&gt;        assertEquals(&quot;Status code must be 200&quot;, 200, response.getStatusCode());&ltbr /&gt;        assertEquals(&quot;Response must be my mail&quot;,&ltbr /&gt;                &quot;ybonnel@gmail.com&quot;,&ltbr /&gt;                responseToString(response));&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();&ltbr /&gt;&ltbr /&gt;    private HttpResponse sendGetRequest(String url) throws IOException {&ltbr /&gt;        HttpRequestFactory requestFactory =&ltbr /&gt;                HTTP_TRANSPORT.createRequestFactory();&ltbr /&gt;        HttpRequest request = requestFactory.buildGetRequest(new GenericUrl(url));&ltbr /&gt;        return request.execute();&ltbr /&gt;    }&ltbr /&gt;&ltbr /&gt;    private String responseToString(HttpResponse response) throws IOException {&ltbr /&gt;        BufferedReader bufReader = new BufferedReader(new InputStreamReader(&ltbr /&gt;                response.getContent(), response.getContentCharset()));&ltbr /&gt;        StringBuilder builder = new StringBuilder();&ltbr /&gt;        String line = bufReader.readLine();&ltbr /&gt;        while (line != null) {&ltbr /&gt;            builder.append(line);&ltbr /&gt;            line = bufReader.readLine()&ltbr /&gt;        }&ltbr /&gt;        return builder.toString();&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Pour les tests suivant, seule la méthode @Test est à réécrire.&ltbr/&gt;Pour faciliter l&apos;écriture des requêtes http, j&apos;utilise la librairie &lta href=&quot;http://code.google.com/p/google-http-java-client/&quot;&gt;google-http-client&lt/a&gt;, mais si vous avez mieux, je suis preneur.&ltbr/&gt;EDIT : j&apos;utilise maintenant JWebUnit, beaucoup plus simple. &lt/p&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;Déploiement&lt/h1&gt;&ltp&gt;Je n&apos;ai pas encore parlé d&apos;hébergement, ce qui pour un serveur qui doit être accessible publiquement reste important. &lt/p&gt;&ltp&gt;Ayant un serveur dédié à disposition, je suis parti sur de l&apos;auto-hébergement. Si vous me demandez &quot;pourquoi&quot;, je vous répondrai &quot;parce que&quot;...&lt/p&gt;&ltp&gt;Afin de m&apos;auto-héberger j&apos;ai suivi trois étapes : &ltul&gt;&ltli&gt;Assemblage du jar&lt/li&gt;&ltli&gt;Démarrage et arrêt&lt/li&gt;&ltli&gt;Déploiement simplifié&lt/li&gt;&lt/ul&gt;&lt/p&gt;&ltbr/&gt; &lth2&gt;Assemblage du jar&lt/h2&gt;&ltp&gt;Mon build est sous maven, créer un jar contenant les dépendances n&apos;est donc pas très compliqué, il suffit d&apos;ajouter la configuration qui va bien dans le pom.xml : &ltpre class=&quot;brush: xml&quot;&gt;&ltbr /&gt;&amp;lt;build&amp;gt;&ltbr /&gt;    &amp;lt;plugins&amp;gt;&ltbr /&gt;        &amp;lt;plugin&amp;gt;&ltbr /&gt;            &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;&ltbr /&gt;            &amp;lt;configuration&amp;gt;&ltbr /&gt;                &amp;lt;archive&amp;gt;&ltbr /&gt;                    &amp;lt;manifest&amp;gt;&ltbr /&gt;                        &amp;lt;mainClass&amp;gt;fr.ybonnel.codestory.WebServer&amp;lt;/mainClass&amp;gt;&ltbr /&gt;                    &amp;lt;/manifest&amp;gt;&ltbr /&gt;                &amp;lt;/archive&amp;gt;&ltbr /&gt;                &amp;lt;finalName&amp;gt;${artifactId}&amp;lt;/finalName&amp;gt;&ltbr /&gt;                &amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt;&ltbr /&gt;                &amp;lt;descriptorRefs&amp;gt;&ltbr /&gt;                    &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;&ltbr /&gt;                &amp;lt;/descriptorRefs&amp;gt;&ltbr /&gt;            &amp;lt;/configuration&amp;gt;&ltbr /&gt;        &amp;lt;/plugin&amp;gt;&ltbr /&gt;    &amp;lt;/plugins&amp;gt;&ltbr /&gt;&amp;lt;/build&amp;gt;&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltbr/&gt; &lth2&gt;Scripts de démarrage et d&apos;arrêt&lt/h2&gt;&ltp&gt;Pour le démarrage et l&apos;arrêt, je ne me suis pas cassé la tête : &ltul&gt;&ltli&gt;Démarrage : &ltpre class=&quot;brush: shell&quot;&gt;java -jar code-story.jar &amp;gt;&amp;gt; serveur.log 2&amp;gt;&amp;1 &amp;&lt/pre&gt;&lt/li&gt;&ltli&gt;Arrêt : &ltpre class=&quot;brush: shell&quot;&gt;ps -ef | grep java | grep code-story | grep -v grep | while read a b c &ltbr /&gt;do&ltbr /&gt;    kill -9 $b&ltbr /&gt;done&lt/pre&gt;&lt/li&gt;&lt/ul&gt;&lt/p&gt;&ltbr/&gt; &lth2&gt;Déploiement simplifié&lt/h2&gt;&ltp&gt;Le dernier truc auquel je tenais est un déploiement simple, je suis passé par deux étapes avec des logiques très différentes : &ltul&gt;&ltli&gt;Déploiement par update des sources&lt/li&gt;&ltli&gt;Déploiement par git push&lt/li&gt;&lt/ul&gt;&lt/p&gt; &lth4&gt;Déploiement par update des sources&lt/h4&gt;&ltp&gt;Ma première façon de déployer était relativement simple, j&apos;ai fait un clone de mon repo git sur le serveur. Donc pour redéployer, je faisait simplement un &quot;git pull&quot;, suivi d&apos;une compilation et restart du serveur.&ltbr/&gt;Mon script de déploiement ressemblait donc à : &ltpre class=&quot;brush: shell&quot;&gt;&ltbr /&gt;git pull&ltbr /&gt;mvn clean install assembly:single&ltbr /&gt;&lt/pre&gt;Il suffisait ensuite de redémarrer le serveur pour prendre en compte le nouveau jar. &lt/p&gt;&ltp&gt;Quelques inconvénients cependant à cette technique : &ltul&gt;&ltli&gt;Il faut se connecter au serveur pour le mettre à jour.&lt/li&gt;&ltli&gt;On mélange les sources et la partie serveur au même endroit&lt/li&gt;&lt/ul&gt;&lt/p&gt; &lth4&gt;Déploiement par git push&lt/h4&gt;&ltp&gt;J&apos;ai eu envie que le déploiement se résume à un &quot;git push serveur master&quot; depuis mon poste de dev (fortement inspiré de la façon de déployer sur heroku).&lt/p&gt;&ltp&gt;&ltu&gt;Première étape&lt/u&gt;, créer le repo git sur le serveur (depuis le serveur) : &ltpre class=&quot;brush: shell&quot;&gt;&ltbr /&gt;mkdir CodeStory.git&ltbr /&gt;cd CodeStory.git&ltbr /&gt;git init --bare&ltbr /&gt;&lt/pre&gt;Et voilà, j&apos;ai un repo git accessible par ssh.&lt/p&gt;&ltp&gt;&ltu&gt;Deuxième étape&lt/u&gt;, pousser le contenu actuel sur le repo (depuis mon poste de dev) : &ltpre class=&quot;brush: shell&quot;&gt;&ltbr /&gt;git remote add serveur ssh://ybonnel@XXX.XXX.XXX.XXX:XXXX/home/ybonnel/CodeStory.git&ltbr /&gt;git push serveur master&ltbr /&gt;&lt/pre&gt;&lt/p&gt;&ltp&gt;&ltu&gt;Troisième étape&lt/u&gt;, créer la partie serveur (sur le serveur donc) : &ltpre class=&quot;brush: shell&quot;&gt;&ltbr /&gt;mkdir CodeStory-server&ltbr /&gt;cd CodeStory-server/&ltbr /&gt;cp ../CodeStory/target/code-story.jar .&ltbr /&gt;cp ../CodeStory/scripts/* .&ltbr /&gt;&lt/pre&gt;Mon répertoire &quot;CodeStory-server&quot; contient donc : &ltul&gt;&ltli&gt;Le jar&lt/li&gt;&ltli&gt;Le script de démarrage et le script d&apos;arrêt&lt/li&gt;&lt/ul&gt;&lt/p&gt;&ltp&gt;&ltu&gt;Quatrième et dernière étape&lt/u&gt;, créer le hook sur le repo git. Pour ce faire, j&apos;ai créé le script &quot;post-receive&quot; dans &quot;CodeStory.git/hooks&quot; dont voici le contenu : &ltpre class=&quot;brush: shell&quot;&gt;&ltbr /&gt;echo &quot;Updating server...&quot;&ltbr /&gt;rm -rf /home/ybonnel/CodeStory&ltbr /&gt;git clone /home/ybonnel/CodeStory.git /home/ybonnel/CodeStory&ltbr /&gt;cd /home/ybonnel/CodeStory&ltbr /&gt;./updateServeur.sh&ltbr /&gt;echo &quot;Update and restart of server are done&quot;&ltbr /&gt;&lt/pre&gt;Et voici le contenu du script &quot;updateServeur.sh&quot; : &ltpre class=&quot;brush: shell&quot;&gt;&ltbr /&gt;mvn clean install assembly:single&ltbr /&gt;if [ $? -eq 0 ]&ltbr /&gt;then&ltbr /&gt;        cp scripts/* ../CodeStory-server/&ltbr /&gt;        cp target/code-story.jar ../CodeStory-server/code-story.jar.new&ltbr /&gt;        cd ../CodeStory-server&ltbr /&gt;        ./stopServeur.sh&ltbr /&gt;        mv code-story.jar code-story.jar.old&ltbr /&gt;        mv code-story.jar.new code-story.jar&ltbr /&gt;        ./startServeur.sh&ltbr /&gt;        sleep 1&ltbr /&gt;        tail -10 serveur.log&ltbr /&gt;fi&ltbr /&gt;&lt/pre&gt;Un fois ce hook mis en place, lorsque je fait un &quot;git push serveur master&quot; depuis mon poste de dev, une compile maven se lance, et si le build maven est OK, le serveur est mis à jour. Et je vois le résultat de la compile et du déploiement en direct lors de mon git push. &lt/p&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;Et dans la vrai vie?&lt/h1&gt;&ltp&gt;Maintenant vous allez me dire, c&apos;est bien sympa ton truc, mais dans la vrai vie, les projets sont un peu plus compliqués que simplement fournir un email en réponse à un GET...&ltbr/&gt;Les architectures Web modernes sont souvent composées d&apos;une partie serveur qui répond du JSON, et une partie cliente qui joue avec (y a qu&apos;à voir le succès de angular.js). Et avec des architectures de ce type, répondre du JSON est-il beaucoup plus compliqué que répondre une adresse email? &lt/p&gt;&ltp&gt;Pour information, mon site &lta href=&quot;http://ybo-tv.ybonnel.fr&quot;&gt;ybo-tv&lt/a&gt; est hébergé sur un tomcat, mais il serait relativement facile de le basculer sur une architecture de ce type (pas de stack lourde juste pour répondre du JSON, c&apos;est facilement faisable en spécifique). &lt/p&gt;

          </description>
      </item>
      
      <item>
          <title>Comparaison des parseurs CSV</title>
          <link>http://www.ybonnel.fr/2012/08/comparaison-des-parseurs-csv.html</link>
          <pubDate>Thu, 23 Aug 2012 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2012/08/comparaison-des-parseurs-csv.html</guid>
          <description>
              Mon petit projet &quot;CsvEgine&quot; commençant à ressembler à quelque chose, je vais me lancer dans un petit comparatifs des parseurs que je peux trouver sur internet.&ltbr /&gt;&ltbr /&gt;Pour pouvoir comparer ces différents parseurs je vais utiliser l&apos;exemple basique de l&apos;utilisation de CsvEngine : &lta href=&quot;https://github.com/ybonnel/CsvEngine/wiki/Basics&quot;&gt;Basics&lt/a&gt;.&ltbr/&gt;Il s&apos;agit donc de parser un fichier CSV contenant des chiens avec comme attributs le nom, la race et le propriétaire.&ltbr/&gt;On verra également comment écrire le fichier. &ltbr/&gt;La troisième étape de comparaison sera la validation : &ltul&gt;&ltli&gt;Le nom et la race sont obligatoires&lt/li&gt;&ltli&gt;La race doit faire partie d&apos;une liste connues de races&lt/li&gt;&lt/ul&gt;&ltbr/&gt;La quatrième étape sera du parsing CSV complexe, ajout de retour à la ligne pour le propriétaire. &ltbr/&gt;&ltbr/&gt;Et enfin pour finir la comparaison je finirai avec un petit bench, en reprenant ce que j&apos;avais fait mon &quot;CsvEngine&quot; (qui à l&apos;époque s&apos;appelait MoteurCsv) : &lta href=&quot;http://www.ybonnel.fr/2012/02/bench-de-moteurcsv.html&quot;&gt;Bench MoteurCsv&lt/a&gt;&ltbr/&gt;&ltbr/&gt;Pour la liste des parseurs, je suis parti de cet article : &lta href=&quot;http://www.improve-technologies.com/2012/07/18/java-et-csv-tour-dhorizon-des-solutions-open-source/&quot;&gt;Java et CSV tour d&apos;horizon des solutions open-source&lt/a&gt;&ltbr/&gt;Je rajouterai quand même CsvEngine :) &ltbr/&gt;&ltbr/&gt;Comme d&apos;habitude, l&apos;ensemble du code est disponible sur github : &lta href=&quot;https://github.com/ybonnel/CsvJavaComparaison&quot;&gt;CsvJavaComparaison&lt/a&gt;. &ltbr/&gt;&ltbr/&gt; &lth1&gt;BeanFiles&lt/h1&gt; Site : &lta href=&quot;http://code.google.com/p/beanfiles/&quot;&gt;http://code.google.com/p/beanfiles/&lt/a&gt;&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 0 : Documentation et mise en place&lt/h2&gt;Voici tout d&apos;abord les problèmes que j&apos;ai rencontré avec BeanFiles pour la mise en place : &ltul&gt;&ltli&gt;La documentation est très pauvre : une page sur le wiki, plus une classe de test.&lt/li&gt;&ltli&gt;BeanFiles est une librairie construite avec maven, mais je n&apos;ai pas trouvé de repo maven associé, ce qui a compliqué la mise en place&lt/li&gt;&ltli&gt;La documentation est relativement pauvre, elle ne contient qu&apos;un exemple de code, mais pas de tuto de mise en place, du coup j&apos;ai été obligé d&apos;aller voir dans le pom.xml du code source pour avoir les dépendances.&lt/li&gt;&lt/ul&gt; &ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 1 : Lecture du fichier CSV simple&lt/h2&gt;La mise en place est relativement simple une fois que les problèmes ont été résolus :). &ltbr/&gt;Mise à part les problèmes sités plus haut, BeanFiles n&apos;aime pas du tout avoir des lignes vides à la fin du fichier.&ltbr/&gt;Une autre limitation, les attributs de la classe doivent avoir les mêmes noms que les entêtes dans le fichier CSV.  &ltbr/&gt;&ltbr/&gt; La lecture est relativement simple : &ltpre class=&quot;brush: java&quot;&gt;public List&amp;lt;Dog&amp;gt; getDogs(InputStream stream) throws IOException {&ltbr /&gt;    CSVReaderIterator&amp;lt;Dog&amp;gt; readerIterator = new CSVReaderIterator&amp;lt;Dog&amp;gt;(Dog.class, stream);&ltbr /&gt;    stream.close();&ltbr /&gt;    List&amp;lt;Dog&amp;gt; dogs = new ArrayList&amp;lt;Dog&amp;gt;();&ltbr /&gt;    for (Dog dog : readerIterator) {&ltbr /&gt;        dogs.add(dog);&ltbr /&gt;    }&ltbr /&gt;    return dogs;&ltbr /&gt;}&lt/pre&gt;J&apos;aurais préféré que la fermeture du stream soit gérée par la librairie.&ltbr/&gt;L&apos;utilisation d&apos;un iterator est pas bête, toutefois elle peux donner l&apos;impression que la lecture du fichier se fait au fur et à mesure, alors que pas du tout :)&ltbr/&gt;Du coup comme la lecture est finie après l&apos;appel au constructeur, j&apos;aurais bien aimé pouvoir récupérer directement la liste (un getAll() sur l&apos;iterator).&ltbr/&gt;Je trouve qu&apos;avoir mis le parsing dans le constructeur n&apos;est pas génial...&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 2 : écriture de fichier CSV&lt/h2&gt;Il n&apos;est pas possible d&apos;écrire avec cette librairie.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 3 : validation&lt/h2&gt;Pas de validation non plus.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 4 : parsing complexe.&lt/h2&gt;Aucun problème avec les retour à la ligne pour BeanFiles.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 5 : bench&lt/h2&gt;Pour le bench, j&apos;ai généré un fichier &quot;moyen&quot; (100 000 lignes) et un gros fichier (1 000 000 lignes).&ltbr/&gt;Pour le fichier moyen, le temps moyen de traitement est de 1292ms.&ltbr/&gt;&ltbr/&gt; Pour le gros fichier, il a fallu que je monte la JVM à 2Go. C&apos;est un problème que je vois à BeanFiles, il n&apos;y a pas de possibilité d&apos;ajouter un handler pour effectuer un traitement au fur et à mesure de la lecture. Pour traiter de gros fichiers, c&apos;est donc un gros problème.&ltbr/&gt;Pour traiter ce fichier, le temps moyen de traitement est de 15120ms avec une consommation mémoire d&apos;un peu moins de 1,6Go.&ltbr/&gt;&ltbr/&gt; &lth1&gt;BeanIO&lt/h1&gt;BeanIO est sûrement très bien, mais j&apos;aime pas trop les configuration XML, donc je passe.&ltbr/&gt;&ltbr/&gt;  &lth1&gt;Commons-Csv&lt/h1&gt;Je ne l&apos;ai pas étudié non plus, pour deux raisons : &ltul&gt;&ltli&gt;La version actuelle est la version 1.0-SNAPSHOT&lt/li&gt;&ltli&gt;C&apos;est bas niveau, un peu comme open-csv&lt/li&gt;&lt/ul&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;CsvToSql&lt/h1&gt;Encore du XML... et en plus, ça n&apos;a pas l&apos;air adapté à ce que je veux faire.&ltbr/&gt;&ltbr/&gt; &lth1&gt;FlatPack&lt/h1&gt;Encore du XML...&ltbr/&gt;&ltbr/&gt; &lth1&gt;JavaCSV&lt/h1&gt;Les exemples de code montre que cette librairie ne fait pas vraiment du mapping : &lta href=&quot;http://www.csvreader.com/java_csv_samples.php&quot;&gt;JavaCSV Samples&lt/a&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;JCsv&lt/h1&gt; Site : &lta href=&quot;http://code.google.com/p/jcsv/&quot;&gt;http://code.google.com/p/jcsv/&lt/a&gt;&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 0 : Documentation et mise en place&lt/h2&gt;La mise en place est très simple et documentée, juste la dépendance à ajouter et c&apos;est parti.&ltbr/&gt;C&apos;est le gros point positif pour cette librairie la documentation est très riche.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 1 : Lecture du fichier CSV simple&lt/h2&gt;Étant fan du principe des annotations, je choisi d&apos;utiliser cette méthode pour mon parsing : &ltpre class=&quot;brush: java&quot;&gt;public class Dog {&ltbr /&gt;    @MapToColumn( column = 0)&ltbr /&gt;    private String name;&ltbr /&gt;    @MapToColumn( column = 1)&ltbr /&gt;    private String race;&ltbr /&gt;    @MapToColumn( column = 2)&ltbr /&gt;    private String proprietary;&ltbr /&gt;}&lt/pre&gt;J&apos;aurais préféré pouvoir utiliser la ligne d&apos;entête mais bon... &ltbr/&gt;&ltbr/&gt;La lecture n&apos;est pas très compliquée non plus : &ltpre class=&quot;brush: java&quot;&gt;public List&amp;lt;Dog&amp;gt; getDogs(InputStream stream) throws IOException {&ltbr /&gt;    Reader reader = new InputStreamReader(stream);&ltbr /&gt;&ltbr /&gt;    ValueProcessorProvider provider = new ValueProcessorProvider();&ltbr /&gt;    CSVEntryParser&amp;lt;Dog&amp;gt; entryParser = new AnnotationEntryParser&amp;lt;Dog&amp;gt;(Dog.class, provider);&ltbr /&gt;    CSVReader&amp;lt;Dog&amp;gt; csvDogReader = new CSVReaderBuilder&amp;lt;Dog&amp;gt;(reader)&ltbr /&gt;            .entryParser(entryParser)&ltbr /&gt;            .strategy(new CSVStrategy(&apos;,&apos;, &apos;&quot;&apos;, &apos;#&apos;, true, true)).build();&ltbr /&gt;&ltbr /&gt;    return csvDogReader.readAll();&ltbr /&gt;}&lt/pre&gt;Lors de mon premier essai, je n&apos;avais pas mis de &quot;strategy&quot;, et l&apos;exception remontée n&apos;était pas très parlante (ArrayIndexOutBoundException)... Mis à part ça, je n&apos;ai pas eu de d&apos;autres problèmes.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 2 : écriture de fichier CSV&lt/h2&gt;L&apos;écriture n&apos;est pas très compliquée, par contre on ne peut pas utiliser les annotations, ce qui est un peu dommage. &ltpre class=&quot;brush: java&quot;&gt;public void writeFile(List&amp;lt;Dog&amp;gt; dogs, File file) throws IOException {&ltbr /&gt;&ltbr /&gt;    CSVEntryConverter&amp;lt;Dog&amp;gt; entryConverter = new CSVEntryConverter&amp;lt;Dog&amp;gt;() {&ltbr /&gt;        @Override&ltbr /&gt;        public String[] convertEntry(Dog dog) {&ltbr /&gt;            String[] columns = new String[3];&ltbr /&gt;            columns[0] = dog.getName();&ltbr /&gt;            columns[1] = dog.getRace();&ltbr /&gt;            columns[2] = dog.getProprietary();&ltbr /&gt;&ltbr /&gt;            return columns;&ltbr /&gt;        }&ltbr /&gt;    };&ltbr /&gt;    CSVWriter&amp;lt;Dog&amp;gt; csvDogWriter = new CSVWriterBuilder&amp;lt;Dog&amp;gt;(new FileWriter(file))&ltbr /&gt;            .entryConverter(entryConverter)&ltbr /&gt;            .strategy(new CSVStrategy(&apos;,&apos;, &apos;&quot;&apos;, &apos;#&apos;, true, true))&ltbr /&gt;            .build();&ltbr /&gt;    csvDogWriter.writeAll(dogs);&ltbr /&gt;    csvDogWriter.close();&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt; Le résultat n&apos;est pas très bon, si les champs contiennent des retours à la ligne, il n&apos;ajoute pas les caractères &apos;&quot;&apos; avant et après. Il n&apos;ajoute pas l&apos;entête.&ltbr/&gt;Bref, l&apos;écriture existe, mais elle n&apos;est pas satisfaisante de mon point de vue.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 3 : validation&lt/h2&gt;Pas de principe de validation.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 4 : parsing complexe.&lt/h2&gt;Aucun problème avec les retours à la ligne pour JCsv.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 5 : bench&lt/h2&gt;J&apos;utilise les mêmes fichiers que pour BeanFiles.&ltbr/&gt;Pour le fichier moyen, le temps moyen de traitement est de 39 219ms.&ltbr/&gt;&ltbr/&gt;Pas de problème de consommation mémoire, JCsv permet de lire ligne par ligne, on a donc pas besoin de tout stocker dans une liste. Par contre les performances sont très mauvaises, cela provient du fait que JCsv appelle getAnnotations pour chaque ligne, et ne met rien en cache. &ltbr/&gt;&ltbr/&gt;Le gros fichier confirme le bench avec le fichier moyen : &ltul&gt;&ltli&gt;Temps de traitement moyen : 367 449ms&lt/li&gt;&lt/ul&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;JSefa&lt/h1&gt; Site : &lta href=&quot;http://jsefa.sourceforge.net/&quot;&gt;http://jsefa.sourceforge.net/&lt/a&gt;&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 0 : Documentation et mise en place&lt/h2&gt;La mise en place n&apos;est pas documentée et il n&apos;existe pas de repo maven (en tout cas je l&apos;ai pas trouvé), par contre il suffit d&apos;ajouter le jar.&ltbr/&gt;Au niveau documentation, il existe une page avec les exemples basiques, pour des trucs plus complexes, il faut regarder la javadoc ou le code source.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 1 : Lecture du fichier CSV simple&lt/h2&gt;La déclaration du mapping via les annotations est plutôt simple : &ltpre class=&quot;brush: java&quot;&gt;@CsvDataType&ltbr /&gt;public class Dog {&ltbr /&gt;    @CsvField(pos = 0)&ltbr /&gt;    private String name;&ltbr /&gt;    @CsvField(pos = 1)&ltbr /&gt;    private String race;&ltbr /&gt;    @CsvField(pos = 2)&ltbr /&gt;    private String proprietary;&ltbr /&gt;}&lt/pre&gt;J&apos;aurais préféré pouvoir utiliser la ligne d&apos;entête mais bon...&ltbr/&gt;&ltbr/&gt;La lecture n&apos;est pas très compliquée non plus : &ltpre class=&quot;brush: java&quot;&gt;public List&amp;lt;Dog&amp;gt; getDogs(InputStream stream) throws IOException {&ltbr /&gt;    CsvConfiguration config = new CsvConfiguration();&ltbr /&gt;    config.setFieldDelimiter(&apos;,&apos;);&ltbr /&gt;    Deserializer deserializer = CsvIOFactory.createFactory(config, Dog.class).createDeserializer();&ltbr /&gt;&ltbr /&gt;    List&amp;lt;Dog&amp;gt; dogs = new ArrayList&amp;lt;Dog&amp;gt;();&ltbr /&gt;&ltbr /&gt;    deserializer.open(new InputStreamReader(stream));&ltbr /&gt;    while (deserializer.hasNext()) {&ltbr /&gt;        dogs.add(deserializer.&amp;lt;Dog&amp;gt;next());&ltbr /&gt;    }&ltbr /&gt;    deserializer.close(true);&ltbr /&gt;&ltbr /&gt;    return dogs;&ltbr /&gt;}&lt/pre&gt;Pour filtrer l&apos;entête on est obligé d&apos;ajouter un Filter, un simple boolean dans les config aurait été appréciable...&ltbr/&gt;&ltbr/&gt;&lth2&gt;Étape 2 : écriture de fichier CSV&lt/h2&gt;L&apos;écriture n&apos;est pas très compliquée non plus : &ltpre class=&quot;brush: java&quot;&gt;public void writeFile(List&amp;lt;Dog&amp;gt; dogs, File file) throws IOException {&ltbr /&gt;    CsvConfiguration config = new CsvConfiguration();&ltbr /&gt;    config.setFieldDelimiter(&apos;,&apos;);&ltbr /&gt;    Serializer serializer = CsvIOFactory.createFactory(config, Dog.class).createSerializer();&ltbr /&gt;&ltbr /&gt;    serializer.open(new FileWriter(file));&ltbr /&gt;    for (Dog dog : dogs) {&ltbr /&gt;        serializer.write(dog);&ltbr /&gt;    }&ltbr /&gt;    serializer.close(true);&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;Toujours pas moyen d&apos;ajouter l&apos;entête.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 3 : validation&lt/h2&gt;Il existe une couche de validation, par contre elle n&apos;est pas documentée, et je n&apos;ai pas réussi à la faire fonctionner (n&apos;hésitez pas à corriger mon code sur github si vous savez comment faire :) ).&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 4 : parsing complexe.&lt/h2&gt;Aucun problème avec les retour à la ligne pour JSefa.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 5 : bench&lt/h2&gt;J&apos;utilise les mêmes fichiers que pour BeanFiles.&ltbr/&gt;Pour le fichier moyen, le temps moyen de traitement est de 791ms.&ltbr/&gt;&ltbr/&gt;Le gros fichier confirme le bench avec le fichier moyen : &ltul&gt;&ltli&gt;Temps de traitement moyen : 7 652ms&lt/li&gt;&lt/ul&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;open-csv&lt/h1&gt;C&apos;est une librairie bas niveau (utilisée par la plupart des parseurs haut niveaux), je l&apos;étudierai donc pas ici.&ltbr/&gt;&ltbr/&gt; &lth1&gt;Ostermiller CSV&lt/h1&gt;Dans cette librairie, le mapping se fait à la main, je ne l&apos;étudierai donc pas.&ltbr/&gt;&ltbr/&gt; &lth1&gt;Skife CSV&lt/h1&gt;Encore une librairie bas niveau.&ltbr/&gt;&ltbr/&gt; &lth1&gt;Super CSV&lt/h1&gt; Site : &lta href=&quot;http://supercsv.sourceforge.net/&quot;&gt;http://supercsv.sourceforge.net/&lt/a&gt;&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 0 : Documentation et mise en place&lt/h2&gt;La mise en place n&apos;est pas documentée, c&apos;est pas du maven, dont pas si simple que ça, faut bien penser à mettre les deux jar dans les dépendances...&ltbr/&gt;De manière générale la documentation est plutôt pas mal (malgré le fait qu&apos;il n&apos;existe pas de documentation pour la mise en place).&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 1 : Lecture du fichier CSV simple&lt/h2&gt;Pas d&apos;annotation pour cette librairie, tout se fait par le nom des attributs.&ltbr/&gt;Pour les options il faut passer par des CellProcessors, j&apos;y reviendrai pour la validation.&ltbr/&gt;&ltbr/&gt;La lecture n&apos;est pas très compliquée : &ltpre class=&quot;brush: java&quot;&gt;&ltbr /&gt;public List&amp;lt;Dog&amp;gt; getDogs(InputStream stream) throws IOException {&ltbr /&gt;    List&amp;lt;Dog&amp;gt; dogs = new ArrayList&amp;lt;Dog&amp;gt;();&ltbr /&gt;&ltbr /&gt;    ICsvBeanReader inFile = new CsvBeanReader(new InputStreamReader(stream), CsvPreference.STANDARD_PREFERENCE);&ltbr /&gt;    final String[] header = inFile.getCSVHeader(true);&ltbr /&gt;    Dog dog;&ltbr /&gt;    while( (dog = inFile.read(Dog.class, header)) != null) {&ltbr /&gt;        dogs.add(dog);&ltbr /&gt;    }&ltbr /&gt;    inFile.close();&ltbr /&gt;    return dogs;&ltbr /&gt;}&lt/pre&gt;La gestion de l&apos;entête et l&apos;itération se fait à la main, je trouve ça dommage. Pour le reste c&apos;est plutôt efficace.&ltbr/&gt;&ltbr/&gt;&lth2&gt;Étape 2 : écriture de fichier CSV&lt/h2&gt;Pour l&apos;écriture, il n&apos;y a pas de gestion de mapping, tout ce fait à la main, du coup je ne l&apos;étudierai pas ici.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 3 : validation&lt/h2&gt;Pour la validation, c&apos;est plutôt efficace, par contre cela repose sur l&apos;ordre des champs, un peu dommage.&ltbr/&gt;Il faut donc déclarer un tableau de CellProcessor : &ltpre class=&quot;brush: java&quot;&gt;public static final CellProcessor[] userProcessors = new CellProcessor[] {&ltbr /&gt;        new NotNull(),&ltbr /&gt;        new IsIncludedIn(new HashSet&amp;lt;Object&amp;gt;(DogValid.POSSIBLE_RACES)),&ltbr /&gt;        null&ltbr /&gt;};&lt/pre&gt;On passe ensuite ce tableau pour le parsing des lignes : &ltpre class=&quot;brush: java&quot;&gt;inFile.read(DogValid.class, header, userProcessors)&lt/pre&gt;&ltbr/&gt;&ltbr/&gt;&lth2&gt;Étape 4 : parsing complexe.&lt/h2&gt;Aucun problème avec les retours à la ligne pour Super Csv.&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 5 : bench&lt/h2&gt;J&apos;utilise les mêmes fichiers que pour BeanFiles.&ltbr/&gt;Pour le fichier moyen, le temps moyen de traitement est de 749ms.&ltbr/&gt;&ltbr/&gt;Le gros fichier confirme le bench avec le fichier moyen : &ltul&gt;&ltli&gt;Temps de traitement moyen : 7 523ms&lt/li&gt;&lt/ul&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;CsvEngine&lt/h1&gt; Pour ceux qui ne le savent pas, je suis le développeur de cette librairie, je ne suis donc sans doute pas très objectif :).&ltbr/&gt;Site : &lta href=&quot;https://github.com/ybonnel/CsvEngine&quot;&gt;https://github.com/ybonnel/CsvEngine&lt/a&gt;&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 0 : Documentation et mise en place&lt/h2&gt;La mise en place est très simple et documentée : &lta href=&quot;https://github.com/ybonnel/CsvEngine/wiki/Install&quot;&gt;Wiki install&lt/a&gt;.&ltbr/&gt;De manière générale, entre le wiki, la javadoc et les tests, je pense objectivement que CsvEngine est la librairie la plus documentée de celles que j&apos;ai testées.&ltbr/&gt;&ltbr/&gt;   &lth2&gt;Étape 1 : Lecture du fichier CSV simple&lt/h2&gt;Il faut tout d&apos;abord ajouter les annotations à la classe dog : &ltpre class=&quot;brush: java&quot;&gt;@CsvDataType&ltbr /&gt;@CsvFile&ltbr /&gt;public class Dog {&ltbr /&gt;    @CsvColumn(&quot;name&quot;)&ltbr /&gt;    private String name;&ltbr /&gt;    @CsvColumn(&quot;race&quot;)&ltbr /&gt;    private String race;&ltbr /&gt;    @CsvColumn(&quot;proprietary&quot;)&ltbr /&gt;    private String proprietary;&ltbr /&gt;}&lt/pre&gt;Un truc qu&apos;il faudra ajouter dans CsvEngine et le fait de rendre le nom du champs CSV facultatif (déduit du nom de l&apos;attribut).&ltbr/&gt;&ltbr/&gt;La lecture est très simple : &ltpre class=&quot;brush: java&quot;&gt;&ltbr /&gt;public List&amp;lt;Dog&amp;gt; getDogs(InputStream stream) throws IOException, CsvErrorsExceededException {&ltbr /&gt;    CsvEngine engine = new CsvEngine(Dog.class);&ltbr /&gt;    return engine.parseInputStream(stream, Dog.class).getObjects();&ltbr /&gt;}&lt/pre&gt;&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 2 : écriture de fichier CSV&lt/h2&gt;L&apos;écriture n&apos;est pas plus compliquée que la lecture : &ltpre class=&quot;brush: java&quot;&gt;public void writeFile(List&amp;lt;Dog&amp;gt; dogs, File file) throws IOException {&ltbr /&gt;    CsvEngine engine = new CsvEngine(Dog.class);&ltbr /&gt;    engine.writeFile(new FileWriter(file), dogs, Dog.class);&ltbr /&gt;}&lt/pre&gt;&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 3 : validation&lt/h2&gt;Pour la validation tout passe par les annotations : &ltpre class=&quot;brush: java&quot;&gt;@CsvFile&ltbr /&gt;public class DogValid {&ltbr /&gt;    @CsvColumn(value = &quot;name&quot;, mandatory = true)&ltbr /&gt;    private String name;&ltbr /&gt;    @CsvValidation(ValidatorRace.class)&ltbr /&gt;    @CsvColumn(value = &quot;race&quot;, mandatory = true)&ltbr /&gt;    private String race;&ltbr /&gt;    @CsvColumn(&quot;proprietary&quot;)&ltbr /&gt;    private String proprietary;&ltbr /&gt;    &ltbr /&gt;    public static class ValidatorRace extends ValidatorCsv {&ltbr /&gt;        @Override&ltbr /&gt;        public void validate(String field) throws ValidateException {&ltbr /&gt;            if (!POSSIBLE_RACES.contains(field)) {&ltbr /&gt;                throw new ValidateException(&quot;The race \&quot;&quot; + field + &quot;\&quot; isn&apos;t correct&quot;);&ltbr /&gt;            }&ltbr /&gt;        }&ltbr /&gt;    }&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt; On lit ensuite la fichier comme d&apos;habitude : &ltpre class=&quot;brush: java&quot;&gt;public List&amp;lt;DogValid&amp;gt; readDogsValid(InputStream stream) throws CsvErrorsExceededException {&ltbr /&gt;   CsvEngine engine = new CsvEngine(DogValid.class);&ltbr /&gt;   return engine.parseInputStream(stream, DogValid.class).getObjects();&ltbr /&gt;}&lt/pre&gt;&ltbr/&gt;&ltbr/&gt; &lth2&gt;Étape 4 : parsing complexe.&lt/h2&gt;Aucun problème avec les retour à la ligne pour CsvEngine.  &lth2&gt;Étape 5 : bench&lt/h2&gt;J&apos;utilise les mêmes fichiers que pour BeanFiles. Pour le fichier moyen, le temps moyen de traitement est de 693ms.&ltbr/&gt;&ltbr/&gt;Le gros fichier confirme le bench avec le fichier moyen : &ltul&gt;&ltli&gt;Temps de traitement moyen : 7 028ms&lt/li&gt;&lt/ul&gt;&ltbr/&gt;&ltbr/&gt; &lth1&gt;Conclusion&lt/h1&gt; Première conclusion, écrire un article aussi long avec l&apos;éditeur de Blogger est une corvée... faut que je trouve autre chose pour mon blog.&ltbr/&gt;&ltbr&gt;Voici un petit tableau récapitulatif des tests que j&apos;ai pu mené sur ces librairies :  &lttable border=&quot;1&quot; style=&quot;text-align:center&quot;&gt;&lttr&gt;&ltth/&gt;&ltth&gt;Documentation&lt/th&gt;&ltth&gt;Mise en place&lt/th&gt;&ltth&gt;Lecture&lt/th&gt;&ltth&gt;Écriture&lt/th&gt;&ltth&gt;Validation&lt/th&gt;&ltth&gt;Temps de traitement&lt/th&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;&lta href=&quot;http://code.google.com/p/beanfiles&quot;&gt;BeanFiles&lt/a&gt;&lt/td&gt;&lttd&gt;-&lt/td&gt;&lttd&gt;-&lt/td&gt;&lttd&gt;=&lt/td&gt;&lttd&gt;X&lt/td&gt;&lttd&gt;X&lt/td&gt;&lttd&gt;15 120&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;&lta href=&quot;http://code.google.com/p/jcsv&quot;&gt;JCsv&lt/a&gt;&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;-&lt/td&gt;&lttd&gt;-&lt/td&gt;&lttd&gt;X&lt/td&gt;&lttd&gt;367 449&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;&lta href=&quot;http://jsefa.sourceforge.net&quot;&gt;JSefa&lt/a&gt;&lt/td&gt;&lttd&gt;-&lt/td&gt;&lttd&gt;=&lt/td&gt;&lttd&gt;-&lt/td&gt;&lttd&gt;=&lt/td&gt;&lttd&gt;-&lt/td&gt;&lttd&gt;7 652&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;&lta href=&quot;http://supercsv.sourceforge.net&quot;&gt;Super CSV&lt/a&gt;&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;=&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;-&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;7 523&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;&lta href=&quot;https://github.com/ybonnel/CsvEngine&quot;&gt;CsvEngine&lt/a&gt;&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;+&lt/td&gt;&lttd&gt;7 028&lt/td&gt;&lt/tr&gt;&lt/table&gt; Légende : &ltul&gt;&ltli&gt;X : N&apos;existe pas&lt/li&gt;&ltli&gt;- : Existe mais pas terrible&lt/li&gt;&ltli&gt;= : Existe et marche plutôt bien&lt/li&gt;&ltli&gt;+ : Existe et est vraiment bien fait :)&lt/li&gt;&lt/ul&gt; De mon point de vue tout à fait objectif CsvEngine est la meilleure librairie sur tout les points, son seul défaut est sans doute mon Anglais très approximatif.

          </description>
      </item>
      
      <item>
          <title>Retour de Devoxx France : troisième journée</title>
          <link>http://www.ybonnel.fr/2012/05/retour-de-devoxx-france-troisieme.html</link>
          <pubDate>Tue, 8 May 2012 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2012/05/retour-de-devoxx-france-troisieme.html</guid>
          <description>
              Après mon retour sur la première journée (&lta href=&quot;http://www.ybonnel.fr/2012/04/retour-de-devoxx-france-premiere.html&quot;&gt;ici&lt/a&gt;) et la deuxième journée (&lta href=&quot;http://www.ybonnel.fr/2012/05/retour-de-devoxx-france-deuxieme.html&quot;&gt;ici&lt/a&gt;), voici celui de la troisième et dernière journée. &ltbr/&gt;&ltbr/&gt;&lth1&gt;Les keynotes&lt/h1&gt;Après avoir avalé un nombre de cafés important (la fatigue commençant à se faire sentir), je me dirige vers la salle des keynotes. La salle est toujours aussi impressionnante (950 places).&ltbr/&gt;&ltbr/&gt;&lth2&gt;Trends in mobile application development&lt/h2&gt;Je vais pas pouvoir vraiment vous parler de cette keynote, elle était réalisée par IBM, et tout le monde s&apos;endormait...&ltbr/&gt;La keynote était tellement intéressante que tout le monde se lâchait sur twitter. La seule chose marrante de cette conf a été la fin, où Nicolas Martignole nous a dit que le tweet wall était en panne et qu&apos;il ne pouvait pas l&apos;afficher, belle manière de ne pas mettre mal à l&apos;aise un des sponsors de Devoxx :). &ltbr/&gt;&ltbr/&gt;&lth2&gt;Portrait du développeur en &quot;The Artist&quot;&lt/h2&gt;Rien à voir avec la conf précédente, c&apos;est plutôt l&apos;inverse...&ltbr/&gt;  Patrick Chanezon nous livre son portrait de la vie classique d&apos;un développeur, passionnant. Je ne peux que vous conseiller d&apos;aller voir les slides sur &lta href=&quot;http://www.slideshare.net/chanezon/devoxx-france-2012-portrait-du-developeur-en-the-artist&quot;&gt;slide-share&lt/a&gt;.&ltbr/&gt;Le sujet principale était le cloud, mais cette conf allait beaucoup plus loin et j&apos;ai adoré.&ltbr/&gt;&ltbr/&gt;&lth2&gt;Abstraction Distractions for France&lt/h2&gt;Neal Ford nous parle de couches abstractions, je pense que c&apos;est une des conf les plus impressionnante que j&apos;ai vu, Neal est un très bon orateur et la conf est très bien préparée. Ça ressemblait à une key-note Apple :). &ltbr/&gt;&ltbr/&gt;&lth1&gt;Kotlin ou CodeStory?&lt/h1&gt;Finnalement je suis retourné à CodeStory, si vous ne savez pas ce que c&apos;est, aller voir mon billet sur la deuxième journée :).&ltbr/&gt;Toujours aussi intéressant, cette fois j&apos;ai ramener mon Ordi, j&apos;ai donc même forké et mis en place l&apos;environnement de dev, mais le temps d&apos;installer ZombyJS, j&apos;ai pas pu aller beaucoup plus loin (il fallait installer Node.js...).&ltbr/&gt;Kotlin est lui un nouveau langage créé par Jetbrain, j&apos;irai voir la conf quand elle sera disponible sur Parleys.  &ltbr/&gt;&ltbr/&gt;&lth1&gt;Changeons la conception de nos applications grâce aux services Cloud&lt/h1&gt;Cette conf donnée par Cyrille Le Clerc est intéressante mais je ne l&apos;ai pas trouvé adaptée au publique, pas assez de code et beaucoup trop de présentation de produits... Elle avait cependant l&apos;intérêt de faire un inventaire des produits, je me suis noté qu&apos;il fallait que la revoie lorsqu&apos;elle sortirai sur Parleys. &ltbr/&gt;&ltbr/&gt;&lth1&gt;An overview of Guava : Google Core Libraries for Java&lt/h1&gt;Ben en fait non, quand je suis arrivé devant la porte, c&apos;était déjà plein, et je me suis donc fait refoulé...&ltbr/&gt;Du coup, je suis retourné voir CodeStory, chose marrante ils ont mis en place un système de Cache à l&apos;aide de Guava :). &ltbr/&gt;&ltbr/&gt;&lth1&gt;Java Caching with Guava&lt/h1&gt;Après avoir vu une utilisation du cache avec Guava, je vais voir la conf théorique sur le sujet. En toute franchise, je me suis rendu compte que rien ne vaux la pratique. J&apos;ai l&apos;impression d&apos;avoir plus appris avec les 10 minutes d&apos;explications par la pratique qu&apos;avec les 55 minutes de conf théorique.&ltbr/&gt;Pour ceux qui ne connaissent pas Guava, je pense que c&apos;est la première dépendance à ajouter sur un projet. Guava c&apos;est apache-common en moderne et mieux fait :). &ltbr/&gt;&ltbr/&gt;&lth1&gt;Android, Graphisme et Performance&lt/h1&gt;Romain Guy (développeur de la couche graphique d&apos;android) nous livre quelques astuces pour réaliser des applications Android qui marchent bien.&ltbr/&gt;Un des trucs que j&apos;ai noté (et que je n&apos;ai pas encore eu le temps de tester), c&apos;est le StrictMode qui permet de faire planter l&apos;application dès qu&apos;on fait un accès à une ressource lente dans le UI Thread. Cela permet de corriger tous les accès qui sont fait dans le UI Thread et qui ne devraient pas. &ltbr/&gt;&ltbr/&gt;&lth1&gt;Les Cast Codeurs Podcast&lt/h1&gt;Pour la dernière &quot;conf&quot; de la journée, je suis aller voir l&apos;enregistrement live des Cast Codeurs. Pour ceux qui ne connaissent pas, c&apos;est LE Podcast Java en France. L&apos;ambiance était excellente, Atlassian distribuait des bières ce qui ne gâcher rien :). Si vous voulez vous rendre compte de l&apos;ambiance, il suffit d&apos;écouter l&apos;épisode associé (&lta href=&quot;http://lescastcodeurs.com/2012/04/les-cast-codeurs-podcast-episode-57-en-direct-de-devoxx-france-2012/&quot;&gt;ici&lt/a&gt;).&ltbr/&gt; Pour les bretons, il y aura un autre enregistrement live au Breizhcamp. &ltbr/&gt;&ltbr/&gt;&ltbr/&gt;Toutes les conférences de Devoxx France étaient filmées et seront disponible sur Parleys au fil de l&apos;eau durant l&apos;année en gratuit ou rapidement en payant (les participants y ont accès tout de suite).&ltbr/&gt;  Je tiens à remercier les organisateurs (surnommés les polos rouges), et vivement l&apos;année prochaine! &ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lta href=&quot;http://1.bp.blogspot.com/-r9wlHR8hfqY/T6kP7JihvyI/AAAAAAAAIjg/Q89npEVwqNQ/s1600/equipe_devoxx_france_2012.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left:1em; margin-right:1em&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;234&quot; width=&quot;400&quot; src=&quot;http://1.bp.blogspot.com/-r9wlHR8hfqY/T6kP7JihvyI/AAAAAAAAIjg/Q89npEVwqNQ/s400/equipe_devoxx_france_2012.jpg&quot; /&gt;&lt/a&gt;&lt/div&gt;

          </description>
      </item>
      
      <item>
          <title>Retour de Devoxx France : deuxième journée</title>
          <link>http://www.ybonnel.fr/2012/05/retour-de-devoxx-france-deuxieme.html</link>
          <pubDate>Tue, 1 May 2012 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2012/05/retour-de-devoxx-france-deuxieme.html</guid>
          <description>
              Après mon retour sur la première journée à Devoxx France (billet &lta href=&quot;http://www.ybonnel.fr/2012/04/retour-de-devoxx-france-premiere.html&quot;&gt;ici&lt/a&gt;), voici celui de la deuxième.   &lth1&gt;Les keynotes&lt/h1&gt; Après le deuxième petit dèj, voici le temps des keynotes. La salle était impressionnante (950 places).&ltbr/&gt; &ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lta href=&quot;http://2.bp.blogspot.com/-pig8MItE0ks/T6kEVPfGT7I/AAAAAAAAIjE/iuzxYj9vVsU/s1600/pano-fond-all-perspective2_small.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left:1em; margin-right:1em&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;120&quot; width=&quot;400&quot; src=&quot;http://2.bp.blogspot.com/-pig8MItE0ks/T6kEVPfGT7I/AAAAAAAAIjE/iuzxYj9vVsU/s400/pano-fond-all-perspective2_small.png&quot; /&gt;&lt/a&gt;&lt/div&gt;    &ltbr/&gt;&lth2&gt;Fier d&apos;être développeur?&lt/h2&gt;Pierre Pezzardi, co-fondateur d&apos;OCTO, nous fait part des raisons pour lesquelles, selon lui, le métier de développeur est mal vu. Le développeur, c&apos;est le gars qui crée des logiciels trop compliqués, qui ne plaisent pas aux utilisateurs, et sans jamais demander leurs avis. Il faut donc prendre le temps de comprendre un peu plus la finalité des fonctionnalités que l&apos;on développe. Il est possible que prendre 5 minutes pour déplacer un bouton est bien plus d&apos;impact pour les utilisateurs que de mettre des mois à développer des fonctionnalités obscures sans vraiment comprendre à quoi ça sert.&ltbr/&gt;&ltbr/&gt; &lth2&gt;This could be Heaveb or this could be Hell&lt/h2&gt;Bon, je l&apos;avais évité jusque là, mais ça y est, voici le moment de ma première conf en anglais...&ltbr/&gt;Deux développeurs du London JUG nous donnent la vision angélique et diabolique de l&apos;avenir de Java. Ça manquait pas d&apos;humour, et ils ont pensé à ceux, qui comme moi, ont du mal avec l&apos;anglais en mettant des traductions de leur slide en français :). Je n&apos;ai pas appris grand chose, mais on s&apos;est bien marré pendant cette keynote.&ltbr/&gt;&ltbr/&gt; &lth1&gt;Manipulation de bytecode : démocratisons la magie noire&lt/h1&gt;Je me suis promis qu&apos;un jour je jouerai avec le bytecode, je suis donc allé voir cette conf afin de me donner des pistes. Les speakers nous ont pointé un usage auquel je n&apos;aurais pas pensé : les tests. Injecter du bytecode peux permettre de tester des cas compliqués type filesystem full. J&apos;ai également retenu deux outils à aller voir de plus près : byteman et javassist.&ltbr/&gt;&ltbr/&gt;  &lth1&gt;Le déjeuner&lt/h1&gt;À l&apos;image de celui du premier jour, celui-ci était bien sans être exceptionnel. Il fut encore plus compliqué de trouver une place pour manger :)&ltbr/&gt;&ltbr/&gt; &lth1&gt;Code Story&lt/h1&gt;Ne trouvant pas de conf qui me donne envie, je décide d&apos;aller faire un tour à Code Story. Il s&apos;agit donc de quatre développeurs qui codent en pair programming avec des itérations d&apos;une heure, et ce pendant 2 jours. Un des deux groupes prend le temps d&apos;expliquer ce qu&apos;il fait tandis que l&apos;autre code plus vite. Au bout d&apos;une demi heure, deux développeurs changent de paire.&ltbr/&gt;C&apos;est donc l&apos;occasion de découvrir des outils et manières de développer pour être plus productif. Ils développent sous IntelliJ (pour ceux qui n&apos;ont jamais essayé cet IDE, je vous conseille fortement de le faire). Les tests sont toujours développés en premier en utilisant Infinitest pour vérifier l&apos;état en permanence. Autre idée, le build incassable, ils utilisent un script pour effectuer le push, ce script lance les TUs, et si certains ne passent pas, pas de push.&ltbr/&gt;Comme sur tout les projets, ils ont rencontré des difficultés (problème de syntaxe en css par exemple), ce qui a permis de les rendre plus humain :)&ltbr/&gt;La salle de Code Story était pleine à chaque fois, ce qui prouve que ce genre d&apos;exercice a largement sa place dans une conf.&ltbr/&gt;&ltbr/&gt; &lth1&gt;Kanban pour les nuls&lt/h1&gt;Cette conf était très intéressante, Kanban est une méthode agile qui m&apos;attire énormément. Si vous vous intéressez aux méthodes agiles, je ne peux que vous conseiller de regarder Kanban de près. Cette méthode est beaucoup moins contrainte que Scrum et se base énormément sur les fameux post-it sur un paper board. Mais ce n&apos;est pas aussi simple que ça, l&apos;ajout de workload sur les états permet de contraindre le flux et d&apos;introduire le &quot;flux tiré&quot;. Le principe est qu&apos;une fonctionnalité ne rentre dans le flux qu&apos;une fois qu&apos;une fonctionnalité en est sortie. Cela est bien entendu un peu plus complexe que ça, mais j&apos;aurais du mal à tout vous expliquer :).&ltbr/&gt;Une seule question me taraude l&apos;esprit, c&apos;est comment appliquer ce genre de méthode lorsque le périmètre et les jalons sont imposés!&ltbr/&gt;&ltbr/&gt; &lth1&gt;Code Story again&lt/h1&gt;Comme vous vous en doutez, le principe m&apos;a plu, du coup j&apos;y retourne :)&ltbr/&gt;&ltbr/&gt; &lth1&gt;Introduction à Ceylon&lt/h1&gt;Ceylon, pour ceux qui n&apos;en ont pas entendu parler, c&apos;est un nouveau langage. Le but de ce langage : faire le langage idéal pour les javaistes si on pouvait partir de la feuille blanche (pas de rétro-compatibilité à gérer). Emmanuel Bernard et Stephane Epardaud nous présentent donc ce nouveaux langage, avec du code qui compile! Au niveau road map, l&apos;interopabilité avec Java vient d&apos;être introduite, on va donc pouvoir commencer à faire des choses intéressantes.&ltbr/&gt;Au delà du sujet, le fait que ce soit présenté par Emmanuel m&apos;a bien plu. Pour ceux qui ne le connaissent pas, c&apos;est un des castcodeurs (podcast à écouter d&apos;urgence). Donc le voir en vrai était plutôt sympa, c&apos;est en plus un très bon speaker.&ltbr/&gt;&ltbr/&gt;&ltbr/&gt; À bientôt pour la troisième journée :).

          </description>
      </item>
      
      <item>
          <title>Retour de Devoxx France : première journée</title>
          <link>http://www.ybonnel.fr/2012/04/retour-de-devoxx-france-premiere.html</link>
          <pubDate>Tue, 24 Apr 2012 00:00:00 +0200</pubDate>
          <guid isPermaLink="false">2012/04/retour-de-devoxx-france-premiere.html</guid>
          <description>
              J&apos;ai eu l&apos;occasion de participer à LA grosse conf Java en France, et franchement c&apos;était que du bon.  &ltbr /&gt;&lth1&gt;Les rencontres&lt/h1&gt;Un des trucs les plus plaisant à Devoxx a été les rencontres que j&apos;ai pu faire et les discussions que j&apos;ai pu avoir avec les speakers et participants. Un exemple : c&apos;est pas tous les jours qu&apos;on a l&apos;occasion de discuter avec un développeur de Montain View qui bosse sur Android (Romain Guy en l&apos;occurrence). Ce n&apos;est pas non plus tous les jours qu&apos;on a l&apos;occasion de développer avec un développeur d&apos;exception (David Gageot).&ltbr/&gt;&ltbr/&gt;Je vais donc maintenant essayer de vous faire un petit compte rendu de ces trois jours qui furent très riches!  &ltbr /&gt;&ltbr /&gt;&lth1&gt;Premier jour&lt/h1&gt;Première étape : le café, et les discussions avec les têtes connues et moins connues.&ltbr/&gt;Pour ma part je suis arrivé à 8h tous les matins, ce qui m&apos;a permis de prendre le temps de discuter, les confs ne commençant qu&apos;à 9h30.&ltbr/&gt;&ltbr/&gt;La première journée est un peu particulière, elle est principalement consacrée à des &quot;Universités&quot; et des &quot;Hands-on Labs&quot; qui sont des sessions de 3 heures avec pour les Labs de la manip sur son ordi. Ça laisse donc le temps de rentrer un peu plus dans le détail du sujet, et un peu moins le survoler. &ltbr /&gt;&ltbr /&gt;&lth2&gt;Les 3 A pour Java EE 6&lt/h2&gt;Cette session était donc consacrée à Java EE6. Elle s&apos;est déroulée sous forme de TP permettant de mettre en pratique les nouveautés JEE6. Le TP s&apos;appuyait sur le projet exemple initié par Antonio Goncalves.&ltbr/&gt;J&apos;ai profité de cette session pour tester NetBeans, et franchement, pour faire du JEE, c&apos;est juste excellent. On était 2 sous NetBeans sur 40 personnes environ. Ceux qui utilisaient Eclipse ont commencé à avoir un environnement de dev fonctionnel au bout d&apos;un peu plus d&apos;1h, alors que j&apos;avais quasiment fini. J&apos;avais tout de même anticipé en préparant l&apos;environnement la veille. L&apos;absence d&apos;internet sur place rendant toute installation compliquée.&ltbr/&gt;J&apos;ai donc pu mettre en pratique CDI et JAX RS, et j&apos;ai plutôt été agréablement surpris. On va peut être pouvoir &ltstrike&gt;enfin&lt/strike&gt; se passer de Spring :). Les speakers étaient très disponibles et plutôt sympas (ce qui était le cas pour tout les speakers, je ne vais donc pas le répéter :) ). &ltbr /&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lta href=&quot;https://lh4.googleusercontent.com/-bLT0coZ7BJg/T5O84um2AGI/AAAAAAAAFCk/GOGfTHKB3dA/s800/IMG_1098-web.JPG.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;266&quot; src=&quot;https://lh4.googleusercontent.com/-bLT0coZ7BJg/T5O84um2AGI/AAAAAAAAFCk/GOGfTHKB3dA/s800/IMG_1098-web.JPG.jpg&quot; width=&quot;400&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltbr/&gt;Après cette session, une petite pause déjeuner. J&apos;ai pu manger à ma faim, et sans être exceptionnel (ça vaut pas les galettes saucisses du breizhcamp), c&apos;était plutôt bon, merci donc aux organisateurs. Encore une occasion de discuter et partager avec plein de monde. &ltbr/&gt;&ltbr /&gt;&lth2&gt;Hackergarten Paris&lt/h2&gt;Ne trouvant pas de sujet qui m&apos;intéresse particulièrement, je décide d&apos;aller au Hackergarten. J&apos;ai donc pu découvrir ce que c&apos;est que cette chose imprononçable. C&apos;est en fait l&apos;occasion de contribuer à un projet open-source. La session commence par un inventaire des projets open-source représentés (par un contributeur). Voici ce qui est ressorti de l&apos;inventaire (du moins ceux dont je me souviens) : &ltbr /&gt;&ltul&gt;&ltli&gt;Maven&lt/li&gt;&ltli&gt;Groovy&lt/li&gt;&ltli&gt;Jenkins&lt/li&gt;&ltli&gt;Infinitest&lt/li&gt;&ltli&gt;Je sais plus mais y en avait d&apos;autre :)&lt/li&gt;&lt/ul&gt;Il y avait donc du lourd, j&apos;ai décidé de contribuer à Infinitest. Ce projet se concrétise par un plugin Eclipse et un plugin Intellij permettant d&apos;avoir un état des tests unitaires en permanence dans l&apos;IDE. Dans Eclipse, à chaque build (autant dire tout le temps), le plugin analyse les deltas afin de lancer les tests potentiellement impactés par la modification.&ltbr/&gt;Nous nous somme retrouvés à deux pour contribuer à Infinitest encadrés par David Gageot qui est le Leader du projet. Pendant que David nous présente le code, j&apos;installe l&apos;environnement de dev. David nous présente également une idée de fonctionnalité à réaliser. Actuellement le plugin analyse les dépendances entre classes afin de sélectionner les tests à exécuter, mais si un test est impacté par une modification de fichier plat, il n&apos;est pas exécuté. Sans rentrer dans les détails, cette session c&apos;est traduite par une pull request dans &lta href=&quot;https://github.com/infinitest/infinitest/pull/84&quot;&gt;github&lt/a&gt;, c&apos;était donc plutôt concret. Cela m&apos;a permis de découvrir le développement de plugin Eclipse, et toute la difficulté pour réaliser des tests automatisés dans ce genre d&apos;environnement.&ltbr/&gt;&ltbr /&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lta href=&quot;https://lh5.googleusercontent.com/-eXi6PS5kaSc/T5O--oGvOpI/AAAAAAAAH4o/eGCTXphsSB8/s800/IMG_1716-web.JPG.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;266&quot; src=&quot;https://lh5.googleusercontent.com/-eXi6PS5kaSc/T5O--oGvOpI/AAAAAAAAH4o/eGCTXphsSB8/s800/IMG_1716-web.JPG.jpg&quot; width=&quot;400&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltbr/&gt;&ltbr&gt; &lth2&gt;Les tools in action&lt/h2&gt;La journée s&apos;est terminée pour ma part par trois tools in action, ce format est un format intense : 30 minutes pour présenter un sujet.&ltbr/&gt;&ltbr/&gt;Le premier était sur Selenium Grid, qui permet de mettre en place un pool de browser qui serviront ensuite aux tests automatisés avec Selenium. Malgré toutes les difficultés qu&apos;a pu rencontrer Mathilde Lemee pour les démos, cela donne une bonne idée du fonctionnement de l&apos;outil et donne envie de tester. &ltbr/&gt;&ltbr/&gt;Le suivant était sur AndroidAnnotations : sur scène deux speakers (Pierre-Yves Ricau et Alexandre Thomas). AndroidAnnotations est un framework dont le but est de simplifier les développements Android en utilisant massivement les annotations. Les 30 minutes ont quasiment été entièrement utilisées à du live-coding, ça aurait pu être un exercice casse gueule, mais les deux speakers ont préparé leur truc et tout se déroule sans encombre. Résultat : faut que j&apos;essaye, et j&apos;ai bien envie de contribuer au projet.  &ltbr/&gt;&ltbr/&gt;La tout dernière session fue consacrée aux lambdas en actions avec la beta du JDK8. Ce que j&apos;ai retenu : enfin une évolution majeure du langage Java. Une conséquence marrante des Lambdas est la quasi introduction du polymorphisme (les interface peuvent maintenant avoir des implémentations par défaut pour les méthodes). &ltbr/&gt;&ltbr/&gt;L&apos;article sur la deuxième journée arrivera un peu plus tard :) &ltbr/&gt;&ltbr/&gt;Les photos ont été récupérées sur les albums de &lta href=&quot;https://plus.google.com/photos/100155138787932309893/albums/5734134263593531121&quot;&gt;Claude&lt/a&gt;

          </description>
      </item>
      
      <item>
          <title>Bench de MoteurCsv</title>
          <link>http://www.ybonnel.fr/2012/02/bench-de-moteurcsv.html</link>
          <pubDate>Wed, 22 Feb 2012 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2012/02/bench-de-moteurcsv.html</guid>
          <description>
              Suite à la publication du billet &lta href=&quot;/2012/02/moteurcsv-le-jpa-du-csv.html&quot;&gt;MoteurCsv le JPA du CSV&lt/a&gt;, quelqu&apos;un m&apos;a demandé si j&apos;avais fait un bench. N&apos;en ayant pas fait, je me suis lancé.&ltbr /&gt;Les sources du bench sont disponibles sur &lta href=&quot;http://github.com/ybonnel/BenchMoteurCsv&quot;&gt;github&lt/a&gt;&ltbr /&gt;&ltbr /&gt;&lth1&gt; Génération du fichier de test&lt/h1&gt;Le &quot;cahier des charges&quot; fournit par &quot;bbo&quot; était le suivant :&ltbr /&gt;&ltul&gt;&ltli&gt;~10 000 000 de lignes.&lt/li&gt;&ltli&gt;~200 caractères par ligne.&lt/li&gt;&ltli&gt;~20 champs (4/5 gros champs autour de 20 caractères.)&lt/li&gt;&lt/ul&gt;C&apos;est avec ces contraintes que j&apos;ai créé la classe &lta href=&quot;https://github.com/ybonnel/BenchMoteurCsv/blob/master/src/main/java/fr/ybo/benchmoteurcsv/GenerationFchierCsv.java&quot;&gt;GenerationFchierCsv&lt/a&gt;.&ltbr /&gt;Cette classe génère donc un fichier de 10 000 000 de lignes contenant des lignes avec 20 champs : &ltbr /&gt;&ltul&gt;&ltli&gt;Quatre champs de type String et de 30 caractères&lt/li&gt;&ltli&gt;Quatre champs de type Boolean (1 ou 0)&lt/li&gt;&ltli&gt;Quatre champs de type Integer et de 5 chiffres&lt/li&gt;&ltli&gt;Quatre champs de type Double et de 5 chiffres avant la virgule et 5 chiffres après la virgule&lt/li&gt;&ltli&gt;Quatre champs de type String et de 5 caractères&lt/li&gt;&lt/ul&gt;&ltbr /&gt;Voici le résultat de la génération du fichier :&ltbr /&gt;Statistiques sur la taille des lignes : &ltbr /&gt;&ltul&gt;&ltli&gt;Minimum : 215 caractères&lt/li&gt;&ltli&gt;Maximum : 227 caractères&lt/li&gt;&ltli&gt;Moyenne : 225,666 caractères&lt/li&gt;&lt/ul&gt;Taille du fichier : 2 266 666 035 octets soit 2,11 Go&ltbr /&gt;Génération en 70 576ms &ltbr /&gt;Le résultat est donc à peu près conforme au cahier des charges. &ltbr /&gt;&ltbr /&gt;&lth1&gt; Constitution du bench&lt/h1&gt;Le bench est réalisé par la classe &lta href=&quot;https://github.com/ybonnel/BenchMoteurCsv/blob/master/src/main/java/fr/ybo/benchmoteurcsv/Bench.java&quot;&gt;Bench&lt/a&gt; (&ltspan class=&quot;Apple-style-span&quot; style=&quot;font-size: xx-small;&quot;&gt;je sais, je suis trop bon pour trouver des noms&lt/span&gt;).&ltbr /&gt;Pour le bench, je ne pouvais pas utiliser la méthode permettant de parser tout le fichier et qui renvoie une liste d&apos;objet. Vu la taille du fichier, il est facile de comprendre que le mettre entièrement en mémoire ne serait pas une bonne idée.&ltbr /&gt;Heureusement le moteur contient une autre méthode permettant de réaliser un traitement pour chaque ligne : &lta href=&quot;http://ybonnel.github.com/MoteurCsv/apidocs/fr/ybo/moteurcsv/MoteurCsv.html#parseFileAndInsert(java.io.Reader,%20java.lang.Class,%20fr.ybo.moteurcsv.modele.InsertObject)&quot;&gt;MoteurCsv.parseFileAndInsert&lt/a&gt;&ltbr /&gt;Dans le cadre du bench j&apos;ai donc utilisé cette méthode en ne réalisant aucun traitement : &ltbr /&gt;&ltpre class=&quot;brush: java&quot;&gt;public static void bench1() throws FileNotFoundException {&ltbr /&gt;    long startTime = System.currentTimeMillis();&ltbr /&gt;    moteur.parseFileAndInsert(new FileReader(fichier), ObjetCsv.class,&ltbr /&gt;        new InsertObject&amp;lt;objetcsv&amp;gt;() {&ltbr /&gt;            @Override&ltbr /&gt;            public void insertObject(ObjetCsv objet) {&ltbr /&gt;                // On ne fait rien dans le cadre du bench.&ltbr /&gt;            }&ltbr /&gt;        });&ltbr /&gt;    long elapsedTime = (System.currentTimeMillis() - startTime);&ltbr /&gt;    System.out.println(&quot;Lecture du fichier : &quot; + elapsedTime + &quot;ms&quot;);&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&ltbr /&gt;J&apos;ai également créé une méthode permettant de voir l&apos;utilisation mémoire au fur et à mesure du test.&ltbr /&gt;Le but de cette méthode est de regarder la mémoire occupée avant et après un GC entre chaque itération du bench. Cela permettra de vérifier entre autre qu&apos;il n&apos;y ait pas fuite mémoire. &ltbr /&gt;&ltpre class=&quot;brush: java&quot;&gt;public static void gestionMemoire() {&ltbr /&gt;    // Mémoire totale allouée&ltbr /&gt;    long totalMemory = Runtime.getRuntime().totalMemory();&ltbr /&gt;    // Mémoire utilisée&ltbr /&gt;    long currentMemory = totalMemory - Runtime.getRuntime().freeMemory();&ltbr /&gt;    System.out.println(&quot;Mémoire avant gc : &quot; + (currentMemory / 1024) + &quot;ko/&quot; + (totalMemory / 1024) + &quot;ko&quot;);&ltbr /&gt;    System.gc();&ltbr /&gt;    // Mémoire totale allouée&ltbr /&gt;    totalMemory = Runtime.getRuntime().totalMemory();&ltbr /&gt;    // Mémoire utilisée&ltbr /&gt;    currentMemory = totalMemory - Runtime.getRuntime().freeMemory();&ltbr /&gt;    System.out.println(&quot;Mémoire après gc : &quot; + (currentMemory / 1024) + &quot;ko/&quot; + (totalMemory / 1024) + &quot;ko&quot;);&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&lth1&gt; Résultats&lt/h1&gt;Les tests ont été menés sur un MacBookPro équipé d&apos;un disque SSD et d&apos;un Code i5.&ltbr /&gt;&lttable class=&quot;table table-bordered&quot;&gt;&lttbody&gt;&lttr&gt;&ltth&gt;Étape&lt/th&gt;&ltth&gt;Temps&lt/th&gt;&ltth&gt;Mémoire occupée avant GC&lt/th&gt;&ltth&gt;Mémoire occupée après GC&lt/th&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Avant de commencer&lt/td&gt;&lttd&gt;/&lt/td&gt;&lttd&gt;1 734ko&lt/td&gt;&lttd&gt;338ko&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Instanciation du moteur&lt/td&gt;&lttd&gt;58 222µs&lt/td&gt;&lttd&gt;14 049ko&lt/td&gt;&lttd&gt;387ko&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Lecture du fichier (itération 1)&lt/td&gt;&lttd&gt;65 902ms&lt/td&gt;&lttd&gt;14 049ko&lt/td&gt;&lttd&gt;387ko&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Lecture du fichier (itération 2)&lt/td&gt;&lttd&gt;65 864ms&lt/td&gt;&lttd&gt;13 796ko&lt/td&gt;&lttd&gt;341ko&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Lecture du fichier (itération 3)&lt/td&gt;&lttd&gt;64 638ms&lt/td&gt;&lttd&gt;14 059ko&lt/td&gt;&lttd&gt;341ko&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Lecture du fichier (itération 4)&lt/td&gt;&lttd&gt;65 214ms&lt/td&gt;&lttd&gt;13 700ko&lt/td&gt;&lttd&gt;341ko&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Lecture du fichier (itération 5)&lt/td&gt;&lttd&gt;66 560ms&lt/td&gt;&lttd&gt;14 027ko&lt/td&gt;&lttd&gt;341ko&lt/td&gt;&lt/tr&gt;&lt/tbody&gt;&lt/table&gt;&ltbr /&gt;Ces résultats permettent de montrer plusieurs choses : &ltbr /&gt;&ltul&gt;&ltli&gt;Temps pour instancier le moteur : quasi-null&lt/li&gt;&ltli&gt;Mémoire persistante pour le moteur : quelques Ko&lt/li&gt;&ltli&gt;Performances plutôt satisfaisantes avec un peu plus d&apos;une minute pour lire un fichier de plus de 2Go&lt/li&gt;&lt/ul&gt;&ltbr /&gt;J&apos;ai également fait du profiling avec YourKit afin de vérifier le comportement interne du moteur, cela a montré que la majorité du temps est passé dans la librairie open-csv, l&apos;overhead du moteur est donc plutôt faible. &ltbr /&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lta href=&quot;http://1.bp.blogspot.com/-x_0oaHl-krY/T0UwkAidkhI/AAAAAAAAHRM/o8SlmtudCpA/s1600/yourKitMoteurCsv.png&quot; imageanchor=&quot;1&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;158&quot; src=&quot;http://1.bp.blogspot.com/-x_0oaHl-krY/T0UwkAidkhI/AAAAAAAAHRM/o8SlmtudCpA/s400/yourKitMoteurCsv.png&quot; width=&quot;400&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltbr /&gt;&lth1&gt; Reproduire le bench&lt/h1&gt;N&apos;hésitez pas à reproduire le bench et à me dire les résultats que vous obtenez : &ltbr /&gt;&ltul&gt;&ltli&gt;Cloner le projet depuis github : &lta href=&quot;https://github.com/ybonnel/BenchMoteurCsv&quot;&gt;github.com/ybonnel/BenchMoteurCsv&lt/a&gt;&lt/li&gt;&ltli&gt;Importer le projet en tant que projet maven dans Eclipse&lt/li&gt;&ltli&gt;Lancer d&apos;abord le main de la classe GenerationFchierCsv afin de générer le fichier de test&lt/li&gt;&ltli&gt;Lancer ensuite le main de classe Bench afin de lancer le bench en lui-même&lt/li&gt;&lt/ul&gt;Si vous connaissez d&apos;autres parseurs CSV n&apos;hésitez pas à ajouter des benchs dans le projet pour comparer les performances avec d&apos;autres parseurs.

          </description>
      </item>
      
      <item>
          <title>MoteurCsv le JPA du CSV</title>
          <link>http://www.ybonnel.fr/2012/02/moteurcsv-le-jpa-du-csv.html</link>
          <pubDate>Mon, 20 Feb 2012 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2012/02/moteurcsv-le-jpa-du-csv.html</guid>
          <description>
              Voici un titre qui va faire gonfler mes chevilles :)&ltbr /&gt;Je vais donc vous présenter une petite librairie Java sans prétention que j&apos;ai réalisé afin de pourvoir lire et écrire des fichiers CSV facilement.&ltbr /&gt;&ltbr /&gt;&lth1&gt;C&apos;est quoi le CSV?&lt/h1&gt;Bon pour la définition du format CSV, je vous invite à consulter l&apos;article &lta href=&quot;http://fr.wikipedia.org/wiki/Comma-separated_values&quot;&gt;wikipedia&lt/a&gt;.&ltbr /&gt;&ltbr /&gt;&lth1&gt;Pourquoi cette librairie?&lt/h1&gt;Cette librairie a été crée afin de pouvoir gérer le format &lta href=&quot;https://developers.google.com/transit/gtfs/reference&quot;&gt;GTFS&lt/a&gt;. Ce format est utilisé afin de décrire un réseau de Transports en commun. Techniquement, c&apos;est un zip contenant des fichiers CSV.&ltbr /&gt;J&apos;ai eu à utiliser ce format suite à l&apos;ouverture des données de transports à Rennes où j&apos;ai réalisé une application Android (Transports Rennes) permettant de consulter les horaires de bus.&ltbr /&gt;A l&apos;époque où j&apos;ai créé cette librairie, je baignais dans du JPA la journée, et j&apos;avoue que j&apos;aime beaucoup l&apos;idée de décrire du mapping directement dans la classe associé en utilisant des annotations.&ltbr /&gt;C&apos;est comme ça que MoteurCsv est né.&ltbr /&gt;&ltbr /&gt;&lth1&gt;Alors comment ça s&apos;utilise?&lt/h1&gt;J&apos;ai essayé de simplifier au maximun l&apos;utilisation de la librairie.&ltbr /&gt;&ltbr /&gt;&lth2&gt;Installation&lt/h2&gt;&lth3&gt;Maven&lt/h3&gt;Si vous êtes sous maven, l&apos;intégration dans votre projet est très simple.&ltbr /&gt;Il suffit d&apos;ajouter dans votre pom.xml :&ltbr /&gt;&ltpre class=&quot;brush: xml&quot;&gt;&amp;lt;dependencies&amp;gt;&ltbr /&gt;    &amp;lt;dependency&amp;gt;&ltbr /&gt;        &amp;lt;groupId&amp;gt;fr.ybo&amp;lt;/groupId&amp;gt;&ltbr /&gt;        &amp;lt;artifactId&amp;gt;moteurcsv&amp;lt;/artifactId&amp;gt;&ltbr /&gt;    &amp;lt;/dependency&amp;gt;&ltbr /&gt;&amp;lt;/dependencies&amp;gt;&ltbr /&gt;&ltbr /&gt;&amp;lt;repositories&amp;gt;&ltbr /&gt;    &amp;lt;repository&amp;gt;&ltbr /&gt;        &amp;lt;id&amp;gt;ybonnel-release&amp;lt;/id&amp;gt;&ltbr /&gt;        &amp;lt;url&amp;gt;https://repository-ybonnel.forge.cloudbees.com/release/&amp;lt;/url&amp;gt;&ltbr /&gt;    &amp;lt;/repository&amp;gt;&ltbr /&gt;&amp;lt;/repositories&amp;gt;&ltbr /&gt;&lt/pre&gt;&ltbr /&gt;&lth3&gt;Autre&lt/h3&gt;Si vous n&apos;êtes pas sous maven, il vous suffit d&apos;intégrer les deux jars suivant :&ltbr /&gt;&ltul&gt;&ltli&gt;&lta href=&quot;https://github.com/ybonnel/MoteurCsv/downloads&quot;&gt;moteurcsv-X.Y.Z.jar&lt/a&gt;&lt/li&gt;&ltli&gt;&lta href=&quot;http://sourceforge.net/projects/opencsv/&quot;&gt;opencsv-2.3.jar&lt/a&gt;&lt/li&gt;&lt/ul&gt;&ltbr /&gt;&lth2&gt;Utilisation&lt/h2&gt;Maintenant le vif du sujet, comment utiliser cette petite librairie.&ltbr /&gt;Afin de pouvoir lire ou écrire un CSV il faut commencer par décrire la classe correspondante.&ltbr /&gt;On va prendre pour l&apos;exemple un CSV décrivant des personnes avec deux colonnes : &quot;nom&quot; et &quot;prenom&quot;.&ltbr /&gt;Voici un exemple correspondant :&ltbr /&gt;&ltpre class=&quot;brush: css&quot;&gt;nom,prenom&ltbr /&gt;Bonnel,Yan&ltbr /&gt;Vador,Dark&ltbr /&gt;Noël,Père&ltbr /&gt;&lt/pre&gt;&ltbr /&gt;&lth3&gt;Déclaration de la classe&lt/h3&gt;Nous allons donc créer la classe Personne associée avec les annotations permettant de faire le mapping :&ltbr /&gt;&ltbr /&gt;&ltpre class=&quot;brush: java&quot;&gt;// Annotation permettant de dire au moteur que cette classe est associée à un fichier CSV.&ltbr /&gt;@FichierCsv&ltbr /&gt;public class Personne {&ltbr /&gt;&ltbr /&gt;    // Annotation permettant de dire au moteur que cet attribut est mappé avec la colonne &quot;nom&quot; du CSV.&ltbr /&gt;    @BaliseCsv(&quot;nom&quot;)&ltbr /&gt;    private String nom;&ltbr /&gt;&ltbr /&gt;    // Annotation permettant de dire au moteur que cet attribut est mappé avec la colonne &quot;prenom&quot; du CSV.&ltbr /&gt;    @BaliseCsv(&quot;prenom&quot;)&ltbr /&gt;    private String prenom;&ltbr /&gt;}&ltbr /&gt;&lt/pre&gt;&ltbr /&gt;&lth3&gt;Création du moteur&lt/h3&gt;&ltpre class=&quot;brush: java&quot;&gt;MoteurCsv moteur = new MoteurCsv(Personne.class);&ltbr /&gt;&lt/pre&gt;&ltbr /&gt;&lth3&gt;Lecture d&apos;un fichier CSV&lt/h3&gt;Voici maintenant le code permettant de lire le fichier, et de le transformer en une liste d&apos;objets :&ltbr /&gt;&ltpre class=&quot;brush: java&quot;&gt;InputStream stream = new FileInputStream(new File(&quot;personnes.csv&quot;));&ltbr /&gt;List&amp;lt;Personne&amp;gt; personnes = moteur.parseInputStream(stream, Personne.class);&ltbr /&gt;&lt/pre&gt;&ltbr /&gt;&lth3&gt;Écriture d&apos;un fichier CSV&lt/h3&gt;Et le core permettant d&apos;écrire un fichier :&ltbr /&gt;&ltpre class=&quot;brush: java&quot;&gt;Writer writer = new FileWriter(new File(&quot;personnes.csv&quot;));&ltbr /&gt;moteur.writeFile(writer, personnes, Personne.class);&ltbr /&gt;&lt/pre&gt;&ltbr /&gt;&lth1&gt;Conclusion&lt/h1&gt;J&apos;espère que cette petite librairie sera utile à quelqu&apos;un d&apos;autre que moi :)&ltbr /&gt;Elle est open-source (LGPL v3) : &lta href=&quot;https://github.com/ybonnel/MoteurCsv&quot;&gt;github.com/ybonnel/MoteurCsv&lt/a&gt;&ltbr /&gt;N&apos;hésitez donc pas à forker et à faire des pull request!&ltbr /&gt;Site généré contenant entre autre la javadoc : &lta href=&quot;http://ybonnel.github.com/MoteurCsv&quot;&gt;ybonnel.github.com/MoteurCsv&lt/a&gt;

          </description>
      </item>
      
      <item>
          <title>Transports Rennes - Résultat des votes</title>
          <link>http://www.ybonnel.fr/2012/02/transports-rennes-resultat-des-votes.html</link>
          <pubDate>Wed, 8 Feb 2012 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2012/02/transports-rennes-resultat-des-votes.html</guid>
          <description>
              Après huit jours de votes (&lta href=&quot;http://ybonnel.blogspot.com/2012/01/transports-rennes-votez-pour-vos-icones.html&quot;&gt;ici&lt/a&gt;), voici les résultats pour le vote de la nouvelle icône de l&apos;application Transports Rennes (&lta href=&quot;https://market.android.com/details?id=fr.ybo.transportsrennes&quot;&gt;Market&lt/a&gt;).&ltbr /&gt;&ltbr /&gt;J&apos;ai tout d&apos;abord été agréablement surpris par la participation : 96 votes!&ltbr /&gt;En toute franchise, je m&apos;attendais plutôt à une trentaine de votes max, donc merci à tous pour votre participation.&ltbr /&gt;&ltbr /&gt;Voici les résultats :&ltbr /&gt;&lttable&gt;&lttr&gt;&lttd&gt;Logo 01 - Cercle&lt/td&gt;&lttd&gt;37 votes&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Logo 07 - Etoiles&lt/td&gt;&lttd&gt;17 votes&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Logo 06 - Avec Ligne&lt/td&gt;&lttd&gt;13 votes&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Logo 00 - Actuel&lt/td&gt;&lttd&gt;12 votes&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Logo 02 - Cercle avec ombre&lt/td&gt;&lttd&gt;7 votes&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Logo 05 - Avec Panneau gris&lt/td&gt;&lttd&gt;6 votes&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Logo 03 - Station floutée&lt/td&gt;&lttd&gt;3 votes&lt/td&gt;&lt/tr&gt;&lttr&gt;&lttd&gt;Logo 04 - Avec Panneau bleu&lt/td&gt;&lttd&gt;1 votes&lt/td&gt;&lt/tr&gt;&lt/table&gt;&ltbr /&gt;La prochaine icône de Transports Rennes sera donc :&ltbr /&gt;&lta href=&quot;http://4.bp.blogspot.com/-npF9udbpRz0/TxyViT2Hw1I/AAAAAAAAHOc/SFGQKgYVq6I/s1600/Logo+01+-+Cercle.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://4.bp.blogspot.com/-npF9udbpRz0/TxyViT2Hw1I/AAAAAAAAHOc/SFGQKgYVq6I/s320/Logo+01+-+Cercle.png&quot; width=&quot;124&quot; /&gt;&lt/a&gt;&ltbr /&gt;&ltbr /&gt;Merci à l&apos;auteur pour sa proposition (et ces 5 autres...) : Greg - &lta href=&quot;https://twitter.com/#!/gregbzh35&quot;&gt;@gregbzh35&lt/a&gt;

          </description>
      </item>
      
      <item>
          <title>Transports Rennes - Votez pour vos icônes préférés.</title>
          <link>http://www.ybonnel.fr/2012/01/transports-rennes-votez-pour-vos-icones.html</link>
          <pubDate>Mon, 23 Jan 2012 00:00:00 +0100</pubDate>
          <guid isPermaLink="false">2012/01/transports-rennes-votez-pour-vos-icones.html</guid>
          <description>
              Suite à plusieurs propositions de nouveaux visuels pour l&apos;application Transports Rennes (&lta href=&quot;https://market.android.com/details?id=fr.ybo.transportsrennes&quot;&gt;Market&lt/a&gt;), je lance un vote afin que les utilisateurs puissent choisir les icônes qu&apos;ils préfèrent.&ltbr /&gt;&ltbr /&gt;Voici les propositions que j&apos;ai reçu (la petite image correspond à la résolution réelle sur une téléphone actuel) :&ltbr /&gt;&ltbr /&gt;Logo 00 - actuel (proposé par&amp;nbsp;Nicolas &lta href=&quot;http://www.blogger.com/%27http://www.cryptik-web.com/%27&quot;&gt;www.cryptik-web.com&lt/a&gt;) :&ltbr /&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lta href=&quot;http://2.bp.blogspot.com/-MGnRp3P2yuc/TxyVf03MwMI/AAAAAAAAHOU/wR_Nz-Prow4/s1600/Logo+00+-+Actuel.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://2.bp.blogspot.com/-MGnRp3P2yuc/TxyVf03MwMI/AAAAAAAAHOU/wR_Nz-Prow4/s1600/Logo+00+-+Actuel.png&quot; width=&quot;124&quot; /&gt;&amp;nbsp;&amp;nbsp;&ltimg border=&quot;0&quot; height=&quot;72&quot; src=&quot;http://2.bp.blogspot.com/-MGnRp3P2yuc/TxyVf03MwMI/AAAAAAAAHOU/wR_Nz-Prow4/s1600/Logo+00+-+Actuel.png&quot; width=&quot;72&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Logo 01 - Cercle (proposé par Greg - @gregbzh35) :&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lta href=&quot;http://4.bp.blogspot.com/-npF9udbpRz0/TxyViT2Hw1I/AAAAAAAAHOc/SFGQKgYVq6I/s1600/Logo+01+-+Cercle.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://4.bp.blogspot.com/-npF9udbpRz0/TxyViT2Hw1I/AAAAAAAAHOc/SFGQKgYVq6I/s320/Logo+01+-+Cercle.png&quot; width=&quot;124&quot; /&gt;&amp;nbsp;&amp;nbsp;&ltimg border=&quot;0&quot; height=&quot;72&quot; src=&quot;http://4.bp.blogspot.com/-npF9udbpRz0/TxyViT2Hw1I/AAAAAAAAHOc/SFGQKgYVq6I/s320/Logo+01+-+Cercle.png&quot; width=&quot;72&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Logo 02 - Cercle avec ombre (proposé par Greg - @gregbzh35) :&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lta href=&quot;http://2.bp.blogspot.com/-vU6UXv3syp8/TxyVjMLjsfI/AAAAAAAAHOk/NINQGLQ6OjU/s1600/Logo+02+-+Cercle+avec+ombre.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://2.bp.blogspot.com/-vU6UXv3syp8/TxyVjMLjsfI/AAAAAAAAHOk/NINQGLQ6OjU/s1600/Logo+02+-+Cercle+avec+ombre.png&quot; width=&quot;124&quot; /&gt;&amp;nbsp;&amp;nbsp;&ltimg border=&quot;0&quot; height=&quot;72&quot; src=&quot;http://2.bp.blogspot.com/-vU6UXv3syp8/TxyVjMLjsfI/AAAAAAAAHOk/NINQGLQ6OjU/s1600/Logo+02+-+Cercle+avec+ombre.png&quot; width=&quot;72&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Logo 03 -&amp;nbsp;Station floutée (proposé par Greg - @gregbzh35) :&amp;nbsp;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lta href=&quot;http://4.bp.blogspot.com/-kK7xFeIqVAE/TxyVkLykcYI/AAAAAAAAHOs/hMsHQlaT_to/s1600/Logo+03+-+Station+floute%25CC%2581e.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://4.bp.blogspot.com/-kK7xFeIqVAE/TxyVkLykcYI/AAAAAAAAHOs/hMsHQlaT_to/s1600/Logo+03+-+Station+floute%25CC%2581e.png&quot; width=&quot;124&quot; /&gt;&amp;nbsp;&amp;nbsp;&ltimg border=&quot;0&quot; height=&quot;72&quot; src=&quot;http://4.bp.blogspot.com/-kK7xFeIqVAE/TxyVkLykcYI/AAAAAAAAHOs/hMsHQlaT_to/s1600/Logo+03+-+Station+floute%25CC%2581e.png&quot; width=&quot;72&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Logo 04 -&amp;nbsp;Avec Panneau bleu (proposé par Greg - @gregbzh35) :&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lta href=&quot;http://4.bp.blogspot.com/-p760U3e_7R0/TxyVk9bRfUI/AAAAAAAAHO0/JTzIydseK_g/s1600/Logo+04+-+Avec+Panneau+bleu.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://4.bp.blogspot.com/-p760U3e_7R0/TxyVk9bRfUI/AAAAAAAAHO0/JTzIydseK_g/s1600/Logo+04+-+Avec+Panneau+bleu.png&quot; width=&quot;124&quot; /&gt;&amp;nbsp;&amp;nbsp;&ltimg border=&quot;0&quot; height=&quot;72&quot; src=&quot;http://4.bp.blogspot.com/-p760U3e_7R0/TxyVk9bRfUI/AAAAAAAAHO0/JTzIydseK_g/s1600/Logo+04+-+Avec+Panneau+bleu.png&quot; width=&quot;72&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Logo 05 -&amp;nbsp;Avec Panneau gris (proposé par Greg - @gregbzh35) :&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lta href=&quot;http://1.bp.blogspot.com/-4GGJip4UPps/TxyVliW_vmI/AAAAAAAAHO8/6u9byGzeLF8/s1600/Logo+05+-+Avec+Panneau+gris.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://1.bp.blogspot.com/-4GGJip4UPps/TxyVliW_vmI/AAAAAAAAHO8/6u9byGzeLF8/s1600/Logo+05+-+Avec+Panneau+gris.png&quot; width=&quot;124&quot; /&gt;&amp;nbsp;&amp;nbsp;&ltimg border=&quot;0&quot; height=&quot;72&quot; src=&quot;http://1.bp.blogspot.com/-4GGJip4UPps/TxyVliW_vmI/AAAAAAAAHO8/6u9byGzeLF8/s1600/Logo+05+-+Avec+Panneau+gris.png&quot; width=&quot;72&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Logo 06 - Avec Ligne (proposé par Greg - @gregbzh35) :&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lta href=&quot;http://1.bp.blogspot.com/-d2wSTw4wQS8/TxyVmVvK84I/AAAAAAAAHPE/PN8urxzXnVQ/s1600/Logo+06+-+Avec+Ligne.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://1.bp.blogspot.com/-d2wSTw4wQS8/TxyVmVvK84I/AAAAAAAAHPE/PN8urxzXnVQ/s1600/Logo+06+-+Avec+Ligne.png&quot; width=&quot;124&quot; /&gt;&amp;nbsp;&amp;nbsp;&ltimg border=&quot;0&quot; height=&quot;72&quot; src=&quot;http://1.bp.blogspot.com/-d2wSTw4wQS8/TxyVmVvK84I/AAAAAAAAHPE/PN8urxzXnVQ/s1600/Logo+06+-+Avec+Ligne.png&quot; width=&quot;72&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltdiv style=&quot;text-align: left;&quot;&gt;&ltbr /&gt;Logo 07 - Etoiles (proposé par&amp;nbsp;@yesnault) :&ltbr /&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lta href=&quot;http://3.bp.blogspot.com/-Pp7_Cc4S2Kc/Tx3RROSBwHI/AAAAAAAAHPk/7C-RnsE1Rgk/s1600/Logo+07+-+Etoiles.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&ltimg border=&quot;0&quot; height=&quot;124&quot; src=&quot;http://3.bp.blogspot.com/-Pp7_Cc4S2Kc/Tx3RROSBwHI/AAAAAAAAHPk/7C-RnsE1Rgk/s1600/Logo+07+-+Etoiles.png&quot; width=&quot;124&quot; /&gt;&amp;nbsp;&amp;nbsp;&ltimg border=&quot;0&quot; height=&quot;72&quot; src=&quot;http://3.bp.blogspot.com/-Pp7_Cc4S2Kc/Tx3RROSBwHI/AAAAAAAAHPk/7C-RnsE1Rgk/s1600/Logo+07+-+Etoiles.png&quot; width=&quot;72&quot; /&gt;&lt/a&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Place aux votes (désolé pour le thème, j&apos;ai rien trouvé de mieux...).&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Merci de ne voter qu&apos;une seule fois.&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltb&gt;Les votes sont clos!&lt/b&gt;&lt/div&gt;&ltdiv class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&ltbr /&gt;&lt/div&gt;&ltbr /&gt;&ltbr /&gt;&lt/div&gt;&ltdiv style=&quot;text-align: left;&quot;&gt;&lt/div&gt;

          </description>
      </item>
      

  </channel> 
</rss>
